[{"path":"/articles/datasim_bin.html","id":"datasim_bin","dir":"Articles","previous_headings":"","what":"datasim_bin()","title":"How to simulate binary data","text":"function datasim_bin() enables data simulation platform trial binary endpoint arbitrary number treatment arms entering different time points.","code":""},{"path":"/articles/datasim_bin.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"How to simulate binary data","text":"equal sample sizes across treatment arms, different sample size control group (resulting allocation ratio 1:1:…:1 period) block randomization used, factor multiply number active arms order get block size period can specified input argument (period_blocks, default=2)","code":""},{"path":[]},{"path":[]},{"path":"/articles/datasim_bin.html","id":"input","dir":"Articles","previous_headings":"Usage","what":"Input","title":"How to simulate binary data","text":"user specifies number treatment arms trial, sample size per treatment arm (assumed equal) timing adding arms terms patients recruited trial far. num_arms Number treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks - number multiply number active arms order get block size per period (block size = period_blocks \\(\\cdot\\) #active arms) p0 - response control arm - vector odds ratios treatment arm (length num_arms) lambda - vector strength time trend arm (length num_arms+1, time trend control also allowed) trend - indicates time trend pattern (“linear”, “stepwise” “inv_u”) N_peak - point inverted-u time trend switches direction terms overall sample size full - Boolean. Indicates whether full dataset returned. Default=FALSE","code":""},{"path":"/articles/datasim_bin.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"How to simulate binary data","text":"Per default (using full=FALSE), function outputs dataframe simulated trial data needed analysis. parameter full set TRUE, output list containing extended version dataframe (also including lambdas underlying responses) input parameters.","code":""},{"path":"/articles/datasim_bin.html","id":"examples","dir":"Articles","previous_headings":"Usage","what":"Examples","title":"How to simulate binary data","text":"","code":"# Dataset with trial data only (default)   head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                  p0 = 0.7, OR = rep(1.8, 3),                   lambda = rep(0.15, 4), trend=\"stepwise\")) j response treatment period 1 1        0         0      1 2 2        1         0      1 3 3        0         1      1 4 4        1         1      1 5 5        0         1      1 6 6        1         0      1 # Full dataset  head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                  p0 = 0.7, OR = rep(1.8, 3),                   lambda = rep(0.15, 4), trend=\"stepwise\", full = T)$Data) j response treatment period         p lambda0 lambda1 lambda2 lambda3 1 1        1         0      1 0.7000000    0.15    0.15    0.15    0.15 2 2        1         0      1 0.7000000    0.15    0.15    0.15    0.15 3 3        1         1      1 0.8076923    0.15    0.15    0.15    0.15 4 4        1         1      1 0.8076923    0.15    0.15    0.15    0.15 5 5        1         0      1 0.7000000    0.15    0.15    0.15    0.15 6 6        0         1      1 0.8076923    0.15    0.15    0.15    0.15"},{"path":"/articles/datasim_cont.html","id":"datasim_cont","dir":"Articles","previous_headings":"","what":"datasim_cont()","title":"How to simulate continuous data","text":"function datasim_cont() enables data simulation platform trial continuous endpoint arbitrary number treatment arms entering different time points.","code":""},{"path":"/articles/datasim_cont.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"How to simulate continuous data","text":"equal sample sizes across treatment arms, different sample size control group (resulting allocation ratio 1:1:…:1 period) block randomization used, factor multiply number active arms order get block size period can specified input argument (period_blocks, default=2)","code":""},{"path":[]},{"path":[]},{"path":"/articles/datasim_cont.html","id":"input","dir":"Articles","previous_headings":"Usage","what":"Input","title":"How to simulate continuous data","text":"user specifies number treatment arms trial, sample size per treatment arm (assumed equal) timing adding arms terms patients recruited trial far. num_arms Number treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks - number multiply number active arms order get block size per period (block size = period_blocks \\(\\cdot\\) #active arms) mu0 - response control arm. Default=0 theta - vector treatment effects treatment arm (length num_arms) lambda - vector strength time trend arm (length num_arms+1, time trend control also allowed) sigma - residual variance trend - indicates time trend pattern (“linear”, “stepwise” “inv_u”) N_peak - point inverted-u time trend switches direction terms overall sample size full - Boolean. Indicates whether full dataset returned. Default=FALSE","code":""},{"path":"/articles/datasim_cont.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"How to simulate continuous data","text":"Per default (using full=FALSE), function outputs dataframe simulated trial data needed analysis. parameter full set TRUE, output list containing extended version dataframe (also including lambdas underlying responses) input parameters.","code":""},{"path":"/articles/datasim_cont.html","id":"examples","dir":"Articles","previous_headings":"Usage","what":"Examples","title":"How to simulate continuous data","text":"","code":"# Dataset with trial data only (default)  head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                    theta = rep(0.25, 3), lambda = rep(0.15, 4),                    sigma = 1, trend = \"linear\")) j   response treatment period 1 1 -0.3399678         0      1 2 2 -0.8925137         1      1 3 3 -1.0823928         0      1 4 4  0.7499594         1      1 5 5 -1.1463624         0      1 6 6  0.0372544         1      1 # Full dataset  head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                    theta = rep(0.25, 3), lambda = rep(0.15, 4),                    sigma = 1, trend = \"linear\", full = T)$Data) j   response treatment period        means lambda0 lambda1 lambda2 lambda3 1 1  0.4118195         0      1 0.0000000000    0.15    0.15    0.15    0.15 2 2 -0.6841660         0      1 0.0003006012    0.15    0.15    0.15    0.15 3 3  0.6804520         1      1 0.2506012024    0.15    0.15    0.15    0.15 4 4  1.1151568         1      1 0.2509018036    0.15    0.15    0.15    0.15 5 5  0.8054745         0      1 0.0012024048    0.15    0.15    0.15    0.15 6 6  1.3581023         1      1 0.2515030060    0.15    0.15    0.15    0.15"},{"path":"/articles/get_ss_matrix.html","id":"get_ss_matrix","dir":"Articles","previous_headings":"","what":"get_ss_matrix()","title":"get_ss_matrix","text":"","code":"# Example   get_ss_matrix(num_arms = 3, n_arm = 100, d = c(0, 100, 250)) #>      [,1] [,2] [,3] [,4] #> [1,]   50   50   50   50 #> [2,]   50   50   NA   NA #> [3,]   NA   50   50   NA #> [4,]   NA   NA   50   50"},{"path":"/articles/how_to_run_sim_study.html","id":"preparing-scenarios","dir":"Articles","previous_headings":"","what":"Preparing scenarios","title":"How to run a simulation study","text":"perform simulation study NCC package, first create data frame desired scenarios contains parameters needed data generation analysis. simple example, consider platform trial 4 experimental treatment arms entering sequentially, null hypothesis holds experimental arms. vary strength pattern time trend (parameters lambda trend) order investigate impact type error, bias MSE treatment effect estimates.","code":"sim_scenarios <- data.frame(num_arms = 4,                              n_arm = 250,                              d1 = 250*0,                             d2 = 250*1,                             d3 = 250*2,                             d4 = 250*3,                             period_blocks = 2,                              mu0 = 0,                             sigma = 1,                             theta1 = 0,                             theta2 = 0,                             theta3 = 0,                             theta4 = 0,                             lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             trend = c(rep(\"linear\", 9), rep(\"stepwise_2\", 9)),                             alpha = 0.025,                             ncc = TRUE)  head(sim_scenarios) num_arms n_arm d1  d2  d3  d4 period_blocks mu0 sigma theta1 theta2 theta3 1        4   250  0 250 500 750             2   0     1      0      0      0 2        4   250  0 250 500 750             2   0     1      0      0      0 3        4   250  0 250 500 750             2   0     1      0      0      0 4        4   250  0 250 500 750             2   0     1      0      0      0 5        4   250  0 250 500 750             2   0     1      0      0      0 6        4   250  0 250 500 750             2   0     1      0      0      0   theta4 lambda0 lambda1 lambda2 lambda3 lambda4  trend alpha  ncc 1      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE 2      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE 3      0 -0.0750 -0.0750 -0.0750 -0.0750 -0.0750 linear 0.025 TRUE 4      0 -0.0375 -0.0375 -0.0375 -0.0375 -0.0375 linear 0.025 TRUE 5      0  0.0000  0.0000  0.0000  0.0000  0.0000 linear 0.025 TRUE 6      0  0.0375  0.0375  0.0375  0.0375  0.0375 linear 0.025 TRUE"},{"path":"/articles/how_to_run_sim_study.html","id":"running-simulations","dir":"Articles","previous_headings":"","what":"Running simulations","title":"How to run a simulation study","text":"use function sim_study_par() perform simulation study created scenarios. evaluate 4th experimental treatment arm using regression model period adjustment, well separate pooled analyses. scenario replicated 1000 times. function reports system time scenario finishes order track progress simulations.","code":"set.seed(1234) sim_results <- sim_study_par(nsim = 1000, scenarios = sim_scenarios, arms = 4,                               models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"), endpoint = \"cont\") [1] \"Starting the simulations. 18 scenarios will be simulated. Starting time: 2023-02-15 17:33:13\" [1] \"Scenario 1/18 done. Time: 2023-02-15 17:33:28\" [1] \"Scenario 2/18 done. Time: 2023-02-15 17:33:40\" [1] \"Scenario 3/18 done. Time: 2023-02-15 17:33:51\" [1] \"Scenario 4/18 done. Time: 2023-02-15 17:34:03\" [1] \"Scenario 5/18 done. Time: 2023-02-15 17:34:14\" [1] \"Scenario 6/18 done. Time: 2023-02-15 17:34:24\" [1] \"Scenario 7/18 done. Time: 2023-02-15 17:34:36\" [1] \"Scenario 8/18 done. Time: 2023-02-15 17:34:48\" [1] \"Scenario 9/18 done. Time: 2023-02-15 17:35:00\" [1] \"Scenario 10/18 done. Time: 2023-02-15 17:35:11\" [1] \"Scenario 11/18 done. Time: 2023-02-15 17:35:22\" [1] \"Scenario 12/18 done. Time: 2023-02-15 17:35:35\" [1] \"Scenario 13/18 done. Time: 2023-02-15 17:35:47\" [1] \"Scenario 14/18 done. Time: 2023-02-15 17:35:59\" [1] \"Scenario 15/18 done. Time: 2023-02-15 17:36:10\" [1] \"Scenario 16/18 done. Time: 2023-02-15 17:36:20\" [1] \"Scenario 17/18 done. Time: 2023-02-15 17:36:30\" [1] \"Scenario 18/18 done. Time: 2023-02-15 17:36:41\""},{"path":"/articles/how_to_run_sim_study.html","id":"simulation-results","dir":"Articles","previous_headings":"","what":"Simulation results","title":"How to run a simulation study","text":"resulting data frame contains considered scenarios, well simulation results - probability reject null hypothesis, bias MSE treatment effect estimates. can now visualize performance considered analysis methods respect strength pattern time trend.","code":"head(sim_results) num_arms n_arm d1  d2  d3  d4 period_blocks mu0 sigma theta1 theta2 theta3 1        4   250  0 250 500 750             2   0     1      0      0      0 2        4   250  0 250 500 750             2   0     1      0      0      0 3        4   250  0 250 500 750             2   0     1      0      0      0 4        4   250  0 250 500 750             2   0     1      0      0      0 5        4   250  0 250 500 750             2   0     1      0      0      0 6        4   250  0 250 500 750             2   0     1      0      0      0   theta4 lambda0 lambda1 lambda2 lambda3 lambda4  trend alpha  ncc study_arm 1      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 2      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 3      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 4      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4 5      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4 6      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4       model reject_h0         bias         MSE failed nsim 1  fixmodel     0.019 -0.003656852 0.007022335      0 1000 2 poolmodel     0.004 -0.048407167 0.008013916      0 1000 3  sepmodel     0.019 -0.002725764 0.007783577      0 1000 4  fixmodel     0.025  0.004414737 0.006380196      0 1000 5 poolmodel     0.010 -0.028257855 0.006059994      0 1000 6  sepmodel     0.026  0.004925629 0.007132329      0 1000"},{"path":"/articles/how_to_run_sim_study.html","id":"type-i-error","dir":"Articles","previous_headings":"Simulation results","what":"Type I error","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=reject_h0, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   geom_hline(aes(yintercept = 0.025), linetype = \"dotted\") +   labs(x=\"Strength of time trend\", y=\"Type I error\", color=\"Analysis approach\") +   theme_bw()"},{"path":"/articles/how_to_run_sim_study.html","id":"bias","dir":"Articles","previous_headings":"Simulation results","what":"Bias","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=bias, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   geom_hline(aes(yintercept = 0), linetype = \"dotted\") +   labs(x=\"Strength of time trend\", y=\"Bias\", color=\"Analysis approach\") +   theme_bw()"},{"path":"/articles/how_to_run_sim_study.html","id":"mse","dir":"Articles","previous_headings":"Simulation results","what":"MSE","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=MSE, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   labs(x=\"Strength of time trend\", y=\"MSE\", color=\"Analysis approach\") +   theme_bw()"},{"path":"/articles/ncc_intro.html","id":"non-concurrent-controls-in-platform-trials","dir":"Articles","previous_headings":"","what":"Non-concurrent controls in platform trials","title":"NCC Introduction","text":"Platform trials multi-arm multi-stage clinical trials aim evaluating efficacy several treatment arms within single trial. Experimental treatments permitted enter exit trial different times, new treatments become available, total number newly added treatments pre-specified. Moreover, treatment arms may compared shared control group. treatments enter trial later, control group divided concurrent (CC) non-concurrent controls (NCC), .e., patients randomized given treatment arm entered trial.  using NCC data can offer several benefits, reduced sample size increased statistical power, may also introduce bias effect estimators time trends present trial.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pavla Krotka. Author, maintainer. Marta Bofill Roig. Author, thesis advisor. Katharina Hees. Author. Peter Jacko. Author. Dominic Magirr. Author. Martin Posch. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krotka P, Bofill Roig M, Hees K, Jacko P, Magirr D (2023). NCC: Simulation Analysis Platform Trials Non-Concurrent Controls. https://pavlakrotka.github.io/NCC/, https://github.com/pavlakrotka/NCC.","code":"@Manual{,   title = {NCC: Simulation and Analysis of Platform Trials with Non-Concurrent Controls},   author = {Pavla Krotka and Marta {Bofill Roig} and Katharina Hees and Peter Jacko and Dominic Magirr},   year = {2023},   note = {https://pavlakrotka.github.io/NCC/, https://github.com/pavlakrotka/NCC}, }"},{"path":"/index.html","id":"ncc-simulation-and-analysis-of-platform-trials-with-non-concurrent-controls-","dir":"","previous_headings":"","what":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"NCC package allows users simulate platform trials compare arms using non-concurrent control data.","code":""},{"path":"/index.html","id":"design-overview","dir":"","previous_headings":"","what":"Design overview","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"consider platform trial evaluating efficacy  treatment arms compared shared control. assume treatment arms enter platform trial sequentially. particular, consider trial starting one initial treatment arm, new arm added every  patients recruited trial (). divide duration trial  periods, periods time intervals bounded times treatment arm either enters leaves platform. figure illustrates considered trial design.","code":""},{"path":"/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"package contains following functions:","code":""},{"path":[]},{"path":"/index.html","id":"main-functions-for-data-generation","dir":"","previous_headings":"Functions > Data generation","what":"Main functions for data generation","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"datasim_bin() simulates data binary outcomes datasim_cont() simulates data continuous outcomes","code":""},{"path":"/index.html","id":"auxiliary-functions-for-data-generation","dir":"","previous_headings":"Functions > Data generation","what":"Auxiliary functions for data generation","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"get_ss_matrix() computes sample sizes per arm period linear_trend() linear time trend function, used generate trend patient sw_trend() step-wise time trend function, used generate trend patient inv_u_trend() inverted-u time trend function, used generate trend patient seasonal_trend() seasonal time trend function, used generate trend patient","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"frequentist-approaches","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for binary endpoints","what":"Frequentist approaches","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"fixmodel_bin() performs analysis using regression model adjusting periods fixmodel_cal_bin() performs analysis using regression model adjusting calendar time poolmodel_bin() performs pooled analysis sepmodel_bin() performs separate analysis sepmodel_adj_bin() performs separate analysis adjusting periods","code":""},{"path":"/index.html","id":"bayesian-approaches","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for binary endpoints","what":"Bayesian approaches","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"MAPprior_bin() performs analysis using MAP prior approach timemachine_bin() performs analysis using Time Machine approach","code":""},{"path":[]},{"path":"/index.html","id":"frequentist-approaches-1","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for continuous endpoints","what":"Frequentist approaches","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"fixmodel_cont() performs analysis using regression model adjusting periods fixmodel_cal_cont() performs analysis using regression model adjusting calendar time gam_cont() performs analysis using generalized additive model mixmodel_cont() performs analysis using mixed model adjusting periods random factor mixmodel_cal_cont() performs analysis using mixed model adjusting calendar time random factor mixmodel_AR1_cont() performs analysis using mixed model adjusting periods random factor AR1 correlation structure mixmodel_AR1_cal_cont() performs analysis using mixed model adjusting calendar time random factor AR1 correlation structure piecewise_cont() performs analysis using discontinuous piecewise polynomials per period piecewise_cal_cont() performs analysis using discontinuous piecewise polynomials per calendar time poolmodel_cont() performs pooled analysis sepmodel_cont() performs separate analysis sepmodel_adj_cont() performs separate analysis adjusting periods splines_cont() performs analysis using regression splines knots placed according periods splines_cal_cont() performs analysis using regression splines knots placed according calendar times","code":""},{"path":"/index.html","id":"bayesian-approaches-1","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for continuous endpoints","what":"Bayesian approaches","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"MAPprior_cont() performs analysis using MAP prior approach timemachine_cont() performs analysis using Time Machine approach","code":""},{"path":"/index.html","id":"running-simulations","dir":"","previous_headings":"Functions","what":"Running simulations","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"all_models() auxiliary wrapper function analyze given dataset (treatment-control comparisons) multiple models sim_study() wrapper function run simulation study (treatment-control comparisons) desired scenarios sim_study_par() wrapper function run simulation study (treatment-control comparisons) desired scenarios parallel","code":""},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"Functions","what":"Visualization","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"plot_trial() visualizes progress simulated trial detailed description functions, see vignettes R-package website (https://pavlakrotka.github.io/NCC/).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"install latest version NCC package Github, please run following code:","code":"# install.packages(\"devtools\")  devtools::install_github(\"pavlakrotka/NCC\", build_vignettes = TRUE)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"Documentation functions well vignettes description examples can found package website: https://pavlakrotka.github.io/NCC/","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simulation and Analysis of Platform Trials with Non-Concurrent Controls","text":"[1] Bofill Roig, M., Krotka, P., et al. “model-based time trend adjustments platform trials non-concurrent controls.” BMC medical research methodology 22.1 (2022): 1-16. [2] Lee, K. M., Wason, J. “Including non-concurrent control patients analysis platform trials: worth ?.” BMC medical research methodology 20.1 (2020): 1-12. [3] Saville, B. R., Berry, D. ., et al. “Bayesian Time Machine: Accounting Temporal Drift Multi-arm Platform Trials.” Clinical Trials 19.5 (2022): 490-501 Funding EU-PEARL (EU Patient-cEntric clinicAl tRial pLatforms) project received funding Innovative Medicines Initiative (IMI) 2 Joint Undertaking (JU) grant agreement 853966. Joint Undertaking receives support European Union’s Horizon 2020 research innovation programme EFPIA Children’s Tumor Foundation, Global Alliance TB Drug Development non-profit organisation, Spring works Therapeutics Inc. publication reflects authors’ views. Neither IMI European Union, EFPIA, Associated Partners responsible use may made information contained herein.","code":""},{"path":"/reference/all_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"function analyzes given data using different models indicated user. performs inference indicated experimental treatment arms.","code":""},{"path":"/reference/all_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"","code":"all_models(   data,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"),   endpoint,   alpha = 0.025,   unit_size = 250,   ncc = TRUE,   opt = 2,   prior_prec_tau = 4,   prior_prec_eta = 0.001,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   ci = FALSE,   prec_theta = 0.001,   prec_eta = 0.001,   tau_a = 0.1,   tau_b = 0.01,   prec_a = 0.001,   prec_b = 0.001,   bucket_size = 25,   smoothing_basis = \"tp\",   basis_dim = -1,   gam_method = \"GCV.Cp\",   bs_degree = 3,   poly_degree = 3 )"},{"path":"/reference/all_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"data Simulated trial data, e.g. result datasim_bin() datasim_cont() function. arms Vector treatment arms perform inference . arms compared control group. Default - arms except first one. models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\",). Available models continuous endpoints : 'fixmodel', 'fixmodel_cal', 'gam', 'MAPprior', 'mixmodel', 'mixmodel_cal', 'mixmodel_AR1', 'mixmodel_AR1_cal', 'piecewise', 'piecewise_cal', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'splines', 'splines_cal', 'timemachine'. Available models binary endpoints : 'fixmodel', 'fixmodel_cal', 'MAPprior', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'timemachine'. endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints. alpha Type error rate. Default=0.025. unit_size Number patients per calendar time unit frequentist models adjusting calendar time. Default=25. ncc Boolean. Whether include NCC data analysis using frequentist models. Default=TRUE. opt Boolean. MAP Prior approach, opt=1, former periods used one source; opt=2, periods form different sources get separately included final analysis. Default=2. prior_prec_tau Dispersion parameter half normal prior, prior study heterogeneity MAP Prior approach. Default=4. prior_prec_eta Dispersion parameter normal prior, prior control response (log-odds mean) MAP Prior approach. Default=0.001. n.samples many random samples get drawn calculation posterior mean CIs MAP Prior approach. Default=1000. n.chains Number parallel chains rjags model MAP Prior approach. Default=4. n.iter Number iterations monitor jags.model. Needed coda.samples MAP Prior approach. Default=4000. n.adapt Number iterations adaptation, initial sampling phase samplers adapt behavior maximize efficiency. Needed jags.model MAP Prior approach. Default=1000. robustify Boolean. weight Weight given non-informative component (0 < weight < 1) robustification MAP prior according Schmidli (2014). Default=0.1. ci Boolean. Whether confidence intervals mixed models computed. Default=FALSE. prec_theta Precision (\\(1/\\sigma^2_{\\theta}\\)) prior regarding treatment effect \\(\\theta\\). .e. \\(\\theta \\sim N(0, \\sigma^2_{\\theta})\\) . Default=0.001. prec_eta Precision (\\(1/\\sigma^2_{\\eta_0}\\)) prior regarding control response \\(\\eta_0\\). .e. \\(\\eta_0 \\sim N(0, \\sigma^2_{\\eta_0})\\). Default=0.001. tau_a Parameter \\(\\) Gamma distribution regarding precision drift parameter \\(\\tau\\) Time Machine approach. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.1. tau_b Parameter \\(b\\) Gamma distribution regarding precision drift parameter \\(\\tau\\) Time Machine approach. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.01. prec_a Parameter \\(\\) Gamma distribution regarding precision responses continuous endpoints Time Machine approach. .e., \\(\\sigma \\sim Gamma(,b)\\). Default=0.001. prec_b Parameter \\(b\\) Gamma distribution regarding precision responses continuous endpoints Time Machine approach. .e., \\(\\sigma \\sim Gamma(,b)\\). Default=0.001. bucket_size Number patients per time bucket Time Machine approach. Default=25. smoothing_basis String indicating (penalized) smoothing basis use GAM models. Default=\"tp\". basis_dim dimension basis used represent smooth term GAM models. default depends number variables smooth function . Default=-1. gam_method smoothing parameter estimation method GAM models. Default=\"GCV.Cp\". bs_degree Degree polynomial splines. Default=3. poly_degree Degree discontinuous piecewise polynomials. Default=3.","code":""},{"path":"/reference/all_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"List containing indicator whether null hypothesis rejected , estimated treatment effect investigated treatment arms models.","code":""},{"path":"/reference/all_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"Pavla Krotka","code":""},{"path":"/reference/all_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for simulations performing inference on given treatment arms using given models — all_models","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  all_models(data = trial_data, arms = c(2,3), endpoint = \"bin\") #> $reject_h0_fixmodel_2 #> [1] TRUE #>  #> $treat_effect_fixmodel_2 #> [1] 0.8858793 #>  #> $reject_h0_poolmodel_2 #> [1] TRUE #>  #> $treat_effect_poolmodel_2 #> [1] 0.9564972 #>  #> $reject_h0_sepmodel_2 #> [1] TRUE #>  #> $treat_effect_sepmodel_2 #> [1] 0.8023465 #>  #> $reject_h0_fixmodel_3 #> [1] TRUE #>  #> $treat_effect_fixmodel_3 #> [1] 0.7813792 #>  #> $reject_h0_poolmodel_3 #> [1] TRUE #>  #> $treat_effect_poolmodel_3 #> [1] 1.0706 #>  #> $reject_h0_sepmodel_3 #> [1] FALSE #>  #> $treat_effect_sepmodel_3 #> [1] 0.6407309 #>"},{"path":"/reference/datasim_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"function simulates data platform trial binary endpoints, arbitrary number treatment arms entering different time points shared control arm. user specifies timing adding arms terms patients recruited trial far sample size per arm.","code":""},{"path":"/reference/datasim_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"","code":"datasim_bin(   num_arms,   n_arm,   d,   period_blocks = 2,   p0,   OR,   lambda,   trend,   N_peak,   n_wave,   full = FALSE,   check = TRUE )"},{"path":"/reference/datasim_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"num_arms Number treatment arms trial. n_arm Sample size per experimental treatment arm (assumed equal). d Vector timings adding new arms terms number patients recruited trial far (length num_arms). first entry must 0, trial starts least one experimental treatment arm. period_blocks Number multiply number active arms , order get block size per period. .e., block size period = period_blocks* (number active arms period). Default=2. p0 Response control arm. Vector odds ratios treatment arm ordered entry time treatment arms, .e., first entry vector corresponds odds ratio first experimental treatment arm etc. (length num_arms). lambda Vector strength time trend arm ordered entry time arms (.e., first entry vector corresponds time trend control arm, second entry time trend first treatment arm etc. (length num_arms+1, time trend control also allowed). trend Indicates time trend pattern (\"linear\", \"stepwise\", \"stepwise_2\", \"inv_u\" \"seasonal\"). N_peak Point inverted-u time trend switches direction terms overall sample size. n_wave many cycles (waves) seasonal trend . full Boolean. Indicates whether output form data frame variables needed analysis (FALSE) form list containing information (TRUE). Default=FALSE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE.","code":""},{"path":"/reference/datasim_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"Data frame: simulated trial data (full=FALSE, .e. default) following columns: j - patient recruitment index response - binary response patient j treatment- indicator treatment patient j allocated period - indicator periods patient j recruited List (full=TRUE) containing following elements: Data - simulated trial data, including additional column p expected value used simulation response patient j n_total - total sample size trial n_arm - sample size per arm (assumed equal) num_arms - number experimental treatment arms trial d - timings adding new arms SS_matrix - matrix sample sizes per arm per period period_blocks - number multiply number active arms , order get block size per period p0 - response control arm - odds ratios treatment arm lambda - strength time trend arm time_dep_effect - time dependent treatment effects treatment arm (computing bias) trend - time trend pattern","code":""},{"path":"/reference/datasim_bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"Equal sample sizes experimental treatment arms assumed. Furthermore, allocation ratio 1:1:...:1 period assumed block randomization used assign patients active arms.","code":""},{"path":"/reference/datasim_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"Pavla Krotka, Marta Bofill Roig","code":""},{"path":"/reference/datasim_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate binary data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_bin","text":"","code":"head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")) #>   j response treatment period #> 1 1        1         1      1 #> 2 2        1         1      1 #> 3 3        0         0      1 #> 4 4        1         0      1 #> 5 5        1         1      1 #> 6 6        1         1      1"},{"path":"/reference/datasim_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"function simulates data platform trial continuous endpoints, arbitrary number treatment arms entering different time points shared control arm. user specifies timing adding arms terms patients recruited trial far sample size per arm.","code":""},{"path":"/reference/datasim_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"","code":"datasim_cont(   num_arms,   n_arm,   d,   period_blocks = 2,   mu0 = 0,   theta,   lambda,   sigma,   trend,   N_peak,   n_wave,   full = FALSE,   check = TRUE )"},{"path":"/reference/datasim_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"num_arms Number experimental treatment arms trial. n_arm Sample size per experimental treatment arm (assumed equal). d Vector timings adding new arms terms number patients recruited trial far (length num_arms). first entry must 0, trial starts least one experimental treatment arm. period_blocks Number multiply number active arms , order get block size per period. .e., block size period = period_blocks* (number active arms period). Default=2. mu0 Response control arm. Default=0. theta Vector treatment effects treatment arm ordered entry time treatment arms, .e., first entry vector corresponds effect first experimental treatment arm etc. (length num_arms). lambda Vector strength time trend arm ordered entry time arms (.e., first entry vector corresponds time trend control arm, second entry time trend first treatment arm etc. (length num_arms+1, time trend control also allowed). sigma Standard deviation responses. trend Indicates time trend pattern (\"linear\", \"stepwise\", \"stepwise_2\", \"inv_u\" \"seasonal\"). N_peak Point inverted-u time trend switches direction terms overall sample size. n_wave many cycles (waves) seasonal trend . full Boolean. Indicates whether output form data frame variables needed analysis (FALSE) form list containing information (TRUE). Default=FALSE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE.","code":""},{"path":"/reference/datasim_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"Data frame: simulated trial data (full=FALSE, .e. default) following columns: j - patient recruitment index response - continuous response patient j treatment- indicator treatment patient j allocated period - indicator periods patient j recruited List (full=TRUE) containing following elements: Data - simulated trial data, including additional column means expected value used simulation response patient j n_total - total sample size trial n_arm - sample size per arm (assumed equal) num_arms - number experimental treatment arms trial d - timings adding new arms SS_matrix - matrix sample sizes per arm per period period_blocks - number multiply number active arms , order get block size per period mu0 - response control arm theta - treatment effects treatment arm lambda - strength time trend arm time_dep_effect - time dependent treatment effects treatment arm (computing bias) sigma - standard deviation responses trend - time trend pattern","code":""},{"path":"/reference/datasim_cont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"Equal sample sizes experimental treatment arms assumed. Furthermore, allocation ratio 1:1:...:1 period assumed block randomization used assign patients active arms.","code":""},{"path":"/reference/datasim_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"Pavla Krotka, Marta Bofill Roig","code":""},{"path":"/reference/datasim_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate continuous data from a platform trial with a shared control arm and an arbitrary number of treatment arms entering at different time points — datasim_cont","text":"","code":"head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")) #>   j   response treatment period #> 1 1  0.6683647         1      1 #> 2 2 -0.1208875         0      1 #> 3 3 -1.4000415         0      1 #> 4 4 -1.4681442         1      1 #> 5 5  1.3251783         1      1 #> 6 6 -2.0741113         0      1"},{"path":"/reference/fixmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"function performs logistic regression taking account trial data arm study leaves trial adjusting periods factors.","code":""},{"path":"/reference/fixmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"","code":"fixmodel_bin(data, arm, alpha = 0.025, ncc = TRUE, check = TRUE, ...)"},{"path":"/reference/fixmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/fixmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms log-odds ratio lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/fixmodel_bin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"model-based time trend adjustments platform trials non-concurrent controls. Roig, M.B., Krotka, et al. BMC Medical Research Methodology 22.1 (2022): 1-16.","code":""},{"path":"/reference/fixmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequentist logistic regression model analysis for binary data adjusting for periods — fixmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  fixmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.3945792 #>  #> $treat_effect #> [1] 0.1006736 #>  #> $lower_ci #> [1] -0.6331906 #>  #> $upper_ci #> [1] 0.8521013 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>                1.1693                 0.1982                 0.6097   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>                0.1007                -0.3057                 0.2758   #>    as.factor(period)4   #>                0.6822   #>  #> Degrees of Freedom: 499 Total (i.e. Null);  493 Residual #> Null Deviance:\t    489.1  #> Residual Deviance: 478.9 \tAIC: 492.9 #>"},{"path":"/reference/fixmodel_cal_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"function performs logistic regression taking account trial data arm study leaves trial adjusting calendar time units factors.","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"","code":"fixmodel_cal_bin(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/fixmodel_cal_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment' 'response'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms log-odds ratio lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequentist logistic regression model analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  fixmodel_cal_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.09435928 #>  #> $treat_effect #> [1] 0.4468446 #>  #> $lower_ci #> [1] -0.210709 #>  #> $upper_ci #> [1] 1.127992 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(cal_time),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>               1.07747                0.72529                0.11736   #> as.factor(treatment)3   as.factor(cal_time)2   as.factor(cal_time)3   #>               0.44684                1.75450                0.64399   #>  as.factor(cal_time)4   as.factor(cal_time)5   as.factor(cal_time)6   #>              -0.26779               -0.40809                0.09073   #>  as.factor(cal_time)7   as.factor(cal_time)8   as.factor(cal_time)9   #>               1.08645                0.36569               -0.57938   #> as.factor(cal_time)10  as.factor(cal_time)11  as.factor(cal_time)12   #>               0.31689               -0.32321                0.15126   #> as.factor(cal_time)13  as.factor(cal_time)14  as.factor(cal_time)15   #>               0.39477                0.12653                0.41935   #> as.factor(cal_time)16  as.factor(cal_time)17  as.factor(cal_time)18   #>              -0.11357               -0.35441                0.10928   #> as.factor(cal_time)19  as.factor(cal_time)20   #>              -0.12629                0.09142   #>  #> Degrees of Freedom: 499 Total (i.e. Null);  477 Residual #> Null Deviance:\t    497.6  #> Residual Deviance: 476.4 \tAIC: 522.4 #>"},{"path":"/reference/fixmodel_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting calendar time units factors.","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"","code":"fixmodel_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/fixmodel_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequentist linear regression model analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  fixmodel_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.0002562554 #>  #> $treat_effect #> [1] 0.4557157 #>  #> $lower_ci #> [1] 0.1997297 #>  #> $upper_ci #> [1] 0.7117017 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(cal_time),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>             -0.125631               0.389268               0.429651   #> as.factor(treatment)3   as.factor(cal_time)2   as.factor(cal_time)3   #>              0.455716               0.051658               0.235922   #>  as.factor(cal_time)4   as.factor(cal_time)5   as.factor(cal_time)6   #>             -0.160576              -0.027302              -0.239894   #>  as.factor(cal_time)7   as.factor(cal_time)8   as.factor(cal_time)9   #>             -0.029589              -0.154652              -0.264937   #> as.factor(cal_time)10  as.factor(cal_time)11  as.factor(cal_time)12   #>              0.357215               0.263137              -0.405132   #> as.factor(cal_time)13  as.factor(cal_time)14  as.factor(cal_time)15   #>             -0.077637              -0.008407               0.337490   #> as.factor(cal_time)16  as.factor(cal_time)17  as.factor(cal_time)18   #>              0.163787               0.327167               0.389472   #> as.factor(cal_time)19  as.factor(cal_time)20   #>             -0.146971               0.223755   #>  #>"},{"path":"/reference/fixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting periods factors.","code":""},{"path":"/reference/fixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"","code":"fixmodel_cont(data, arm, alpha = 0.025, ncc = TRUE, check = TRUE, ...)"},{"path":"/reference/fixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/fixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/fixmodel_cont.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"model-based time trend adjustments platform trials non-concurrent controls. Roig, M.B., Krotka, et al. BMC Medical Research Methodology 22.1 (2022): 1-16.","code":""},{"path":"/reference/fixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequentist linear regression model analysis for continuous data adjusting for periods — fixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  fixmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.2241583 #>  #> $treat_effect #> [1] 0.1065461 #>  #> $lower_ci #> [1] -0.1693264 #>  #> $upper_ci #> [1] 0.3824187 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>              -0.08693                0.27240                0.26555   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>               0.10655               -0.04595                0.14901   #>    as.factor(period)4   #>               0.12159   #>  #>"},{"path":"/reference/gam_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized additive model analysis for continuous data — gam_cont","title":"Generalized additive model analysis for continuous data — gam_cont","text":"function performs analysis using generalized additive model taking account trial data arm study leaves trial smoothing patient entry index.","code":""},{"path":"/reference/gam_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized additive model analysis for continuous data — gam_cont","text":"","code":"gam_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   smoothing_basis = \"tp\",   basis_dim = -1,   gam_method = \"GCV.Cp\",   check = TRUE,   ... )"},{"path":"/reference/gam_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized additive model analysis for continuous data — gam_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ci Boolean. Whether confidence intervals computed. Default=FALSE. smoothing_basis String indicating (penalized) smoothing basis use. Default=\"tp\" thin plate regression spline. Available strings 'tp', 'ts', 'ds', 'cr', 'cs', 'cc', 'sos', 'ps', 'cp', 're', 'mrf', 'gp', ''. information see https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/smooth.terms.html. basis_dim dimension basis used represent smooth term. default depends number variables smooth function . Default=-1. information see description parameter 'k' https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/s.html. gam_method smoothing parameter estimation method. Default=\"GCV.Cp\". Available strings 'GCV.Cp', 'GACV.Cp', 'REML', 'P-REML', 'ML', 'P-ML'. information see description parameter 'method' https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/gam.html. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/gam_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized additive model analysis for continuous data — gam_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/gam_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized additive model analysis for continuous data — gam_cont","text":"Pavla Krotka","code":""},{"path":"/reference/gam_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized additive model analysis for continuous data — gam_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  gam_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.02262036 #>  #> $treat_effect #> [1] 0.2696928 #>  #> $lower_ci #> [1] 0.005739197 #>  #> $upper_ci #> [1] 0.5336464 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> response ~ as.factor(treatment) + s(j, bs = smoothing_basis,  #>     k = basis_dim) #>  #> Estimated degrees of freedom: #> 1.23  total = 5.23  #>  #> GCV score: 1.021908      #>"},{"path":"/reference/get_alloc_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Computes sample size matrix - sample sizes per arm (rows) per period (columns)","code":""},{"path":"/reference/get_alloc_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"","code":"get_alloc_matrix(n_total, n_arm, num_arms, d, alloc_ratio = c(1, 1))"},{"path":"/reference/get_alloc_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"n_total Overall sample size trial n_arm Sample size per arm num_arms Number treatment arms trial d Timing adding new arms terms number patients allocated control arm alloc_ratio Vector lenght 2. Allocation ratio control vs treatment","code":""},{"path":"/reference/get_alloc_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Sample size matrix","code":""},{"path":"/reference/get_alloc_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Pavla Krotka","code":""},{"path":"/reference/get_ss_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"function computes sample size matrix necessary functions datasim_bin() datasim_cont().","code":""},{"path":"/reference/get_ss_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"","code":"get_ss_matrix(num_arms, n_arm, d)"},{"path":"/reference/get_ss_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"num_arms Number experimental treatment arms trial. n_arm Sample size per experimental treatment arm. d Vector timings adding new arms terms number patients recruited trial far (length num_arms). first entry must 0, trial supposed start least one treatment.","code":""},{"path":"/reference/get_ss_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"Sample size matrix, consisting sample size per arm per period, arms represented rows (control arm first row experimental arms coming ordered entry time) periods represented columns.","code":""},{"path":"/reference/get_ss_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"Pavla Krotka","code":""},{"path":"/reference/get_ss_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample size matrix for a platform trial with an arbitrary number of treatment arms — get_ss_matrix","text":"","code":"get_ss_matrix(num_arms = 3, n_arm = 100, d = c(0, 100, 250)) #>      [,1] [,2] [,3] [,4] #> [1,]   50   50   50   50 #> [2,]   50   50   NA   NA #> [3,]   NA   50   50   NA #> [4,]   NA   NA   50   50"},{"path":"/reference/inv_u_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of an inverted-u trend — inv_u_trend","title":"Generation of an inverted-u trend — inv_u_trend","text":"function generates time trend given time points trial according inverted-u function.","code":""},{"path":"/reference/inv_u_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of an inverted-u trend — inv_u_trend","text":"","code":"inv_u_trend(j, lambda, N_peak, sample_size)"},{"path":"/reference/inv_u_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of an inverted-u trend — inv_u_trend","text":"j Time points trend generated. lambda Strength time trend. N_peak Point time trend switches direction terms overall sample size. sample_size Total sample size trial.","code":""},{"path":"/reference/inv_u_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of an inverted-u trend — inv_u_trend","text":"Time trend time points j.","code":""},{"path":"/reference/inv_u_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of an inverted-u trend — inv_u_trend","text":"time trend generated according function \\(f(j) = \\lambda \\cdot \\frac{j-1}{N-1} ((j \\leq N_p) - (j > N_p))\\).","code":""},{"path":"/reference/inv_u_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of an inverted-u trend — inv_u_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/linear_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of a linear trend that starts in a given period — linear_trend","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"function generates time trend given time points trial according linear function.","code":""},{"path":"/reference/linear_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"","code":"linear_trend(j, lambda, sample_size)"},{"path":"/reference/linear_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"j Time points trend generated. lambda Strength time trend. sample_size Vector dimension 2, indicating sample size trial period time trend starts remaining sample size.","code":""},{"path":"/reference/linear_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"Time trend time points j.","code":""},{"path":"/reference/linear_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"time trend generated according function \\(f(j) = \\lambda \\cdot \\frac{j-1}{N-1}\\).","code":""},{"path":"/reference/linear_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/MAPprior_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"function performs analysis binary data using Meta-Analytic-Predictive (MAP) Prior approach. method borrows data non-concurrent controls obtain prior distribution control response concurrent periods.","code":""},{"path":"/reference/MAPprior_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"","code":"MAPprior_bin(   data,   arm,   alpha = 0.025,   opt = 2,   prior_prec_tau = 4,   prior_prec_eta = 0.001,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   check = TRUE,   ... )"},{"path":"/reference/MAPprior_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025 opt Binary. opt==1, former periods used one source; opt==2, periods get separately included final analysis. Default=2. prior_prec_tau Dispersion parameter half normal prior, prior study heterogeneity. Default=4. prior_prec_eta Dispersion parameter normal prior, prior control log-odds. Default=0.001. n.samples Number many random samples get drawn calculation posterior mean, p-value CI's. Default=1000. n.chains Number parallel chains rjags model. Default=4. n.iter Number iterations monitor jags.model. Needed coda.samples. Default=4000. n.adapt Number iterations adaptation, initial sampling phase samplers adapt behavior maximize efficiency. Needed jags.model. Default=1000. robustify Boolean. Indicates whether robust prior used. TRUE, mixture prior considered combining MAP prior weakly non-informative component prior. Default=TRUE. weight Weight given non-informative component (0 < weight < 1) robustification MAP prior according Schmidli (2014). Default=0.1. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/MAPprior_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) obtained drawing n.samples random samples posterior distribution treat_effect - estimated treatment effect terms log-odds ratio obtained drawing n.samples random samples posterior distribution lower_ci - lower limit 95% confidence interval obtained drawing n.samples random samples posterior distribution upper_ci - upper limit 95% confidence interval obtained drawing n.samples random samples posterior distribution reject_h0 - indicator whether null hypothesis rejected (p_val < alpha)","code":""},{"path":"/reference/MAPprior_bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"function, argument alpha corresponds \\(1-\\gamma\\), \\(\\gamma\\) decision boundary. Specifically, posterior probability difference distribution null hypothesis : \\(P(p_{treatment}-p_{control}>0) \\ge 1-\\)alpha. case non-informative prior coincides frequentist type error.","code":""},{"path":"/reference/MAPprior_bin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"Robust meta-analytic-predictive priors clinical trials historical control information. Schmidli, H., et al. Biometrics 70.4 (2014): 1023-1032.","code":""},{"path":"/reference/MAPprior_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"Katharina Hees","code":""},{"path":"/reference/MAPprior_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis for binary data using the MAP Prior approach — MAPprior_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  MAPprior_bin(data = trial_data, arm = 3) #> Using default mean for robust component of 1/2. #> $p_val #> [1] 0.021 #>  #> $treat_effect #> [1] 0.7171235 #>  #> $lower_ci #> [1] 0.044407 #>  #> $upper_ci #> [1] 1.460932 #>  #> $reject_h0 #> [1] TRUE #>"},{"path":"/reference/MAPprior_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"function performs analysis continuous data using Meta-Analytic-Predictive (MAP) Prior approach. method borrows data non-concurrent controls obtain prior distribution control response concurrent periods.","code":""},{"path":"/reference/MAPprior_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"","code":"MAPprior_cont(   data,   arm,   alpha = 0.025,   opt = 2,   prior_prec_tau = 4,   prior_prec_eta = 0.001,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   check = TRUE,   ... )"},{"path":"/reference/MAPprior_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025 opt Binary. opt==1, former periods used one source; opt==2, periods get separately included final analysis. Default=2. prior_prec_tau Dispersion parameter half normal prior, prior study heterogeneity. Default=4. prior_prec_eta Dispersion parameter normal prior, prior control mean. Default=0.001. n.samples Number many random samples get drawn calculation posterior mean, p-value CI's. Default=1000. n.chains Number parallel chains rjags model. Default=4. n.iter Number iterations monitor jags.model. Needed coda.samples. Default=4000. n.adapt Number iterations adaptation, initial sampling phase samplers adapt behavior maximize efficiency. Needed jags.model. Default=1000. robustify Boolean. Indicates whether robust prior used. TRUE, mixture prior considered combining MAP prior weakly non-informative component prior. Default=TRUE. weight Weight given non-informative component (0 < weight < 1) robustification MAP prior according Schmidli (2014). Default=0.1. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/MAPprior_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) obtained drawing n.samples random samples posterior distribution treat_effect - estimated treatment effect terms difference means obtained drawing n.samples random samples posterior distribution lower_ci - lower limit 95% confidence interval obtained drawing n.samples random samples posterior distribution upper_ci - upper limit 95% confidence interval obtained drawing n.samples random samples posterior distribution reject_h0 - indicator whether null hypothesis rejected (p_val < alpha)","code":""},{"path":"/reference/MAPprior_cont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"function, argument alpha corresponds \\(1-\\gamma\\), \\(\\gamma\\) decision boundary. Specifically, posterior probability difference distribution null hypothesis : \\(P(\\mu_{treatment}-\\mu_{control}>0) \\ge 1-\\)alpha. case non-informative prior coincides frequentist type error.","code":""},{"path":"/reference/MAPprior_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"Katharina Hees","code":""},{"path":"/reference/MAPprior_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis for continuous data using the MAP Prior approach — MAPprior_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"stepwise\")  MAPprior_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.03383085 #>  #> $treat_effect #> [1] 0.2454671 #>  #> $lower_ci #> [1] -0.02947823 #>  #> $upper_ci #> [1] 0.5200655 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"function performs linear mixed model regression taking account trial data arm study leaves trial adjusting calendar time units random factors AR1 correlation structure.","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"","code":"mixmodel_AR1_cal_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ci Boolean. Whether confidence intervals computed. Default=FALSE. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_AR1_cal_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.003902783 #>  #> $treat_effect #> [1] 0.3305612 #>  #> $lower_ci #> [1] 0.08754548 #>  #> $upper_ci #> [1] 0.5735805 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #> formula: response ~ as.factor(treatment) + AR1(1 | cal_time) #> ML: Estimation of corrPars, lambda and phi by ML. #>     Estimation of fixed effects by ML. #> Estimation of lambda and phi by 'outer' ML, maximizing p_v. #> family: gaussian( link = identity )  #>  ------------ Fixed effects (beta) ------------ #>                       Estimate Cond. SE t-value #> (Intercept)            0.09273  0.07145  1.2978 #> as.factor(treatment)1  0.05773  0.12375  0.4666 #> as.factor(treatment)2  0.20640  0.12375  1.6679 #> as.factor(treatment)3  0.33056  0.12375  2.6712 #>  --------------- Random effects --------------- #> Family: gaussian( link = identity )  #>                    --- Correlation parameters: #>   1.ARphi  #> 0.2890946  #>            --- Variance parameters ('lambda'): #> lambda = var(u) for u ~ Gaussian;  #>    cal_time  :  3.152e-06   #> # of obs: 500; # of groups: cal_time, 20  #>  -------------- Residual variance  ------------ #> phi estimate was 1.02089  #>  ------------- Likelihood values  ------------- #>                         logLik #> p_v(h) (marginal L): -714.6389 #>"},{"path":"/reference/mixmodel_AR1_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"function performs linear mixed model regression taking account trial data arm study leaves trial adjusting periods random factors AR1 correlation structure.","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"","code":"mixmodel_AR1_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_AR1_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ci Boolean. Whether confidence intervals computed. Default=FALSE. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_AR1_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.00550474 #>  #> $treat_effect #> [1] 0.3262943 #>  #> $lower_ci #> [1] 0.03830975 #>  #> $upper_ci #> [1] 0.6023999 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #> formula: response ~ as.factor(treatment) + AR1(1 | period) #> ML: Estimation of corrPars, lambda and phi by ML. #>     Estimation of fixed effects by ML. #> Estimation of lambda and phi by 'outer' ML, maximizing p_v. #> family: gaussian( link = identity )  #>  ------------ Fixed effects (beta) ------------ #>                       Estimate Cond. SE t-value #> (Intercept)             0.1306  0.08221   1.588 #> as.factor(treatment)1   0.3202  0.12786   2.504 #> as.factor(treatment)2   0.2142  0.12713   1.685 #> as.factor(treatment)3   0.3263  0.12786   2.552 #>  --------------- Random effects --------------- #> Family: gaussian( link = identity )  #>                    --- Correlation parameters: #>   1.ARphi  #> 0.1513698  #>            --- Variance parameters ('lambda'): #> lambda = var(u) for u ~ Gaussian;  #>    period  :  0.005255   #> # of obs: 500; # of groups: period, 4  #>  -------------- Residual variance  ------------ #> phi estimate was 1.02339  #>  ------------- Likelihood values  ------------- #>                        logLik #> p_v(h) (marginal L): -716.229 #>"},{"path":"/reference/mixmodel_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"function performs linear mixed model regression taking account trial data arm study leaves trial adjusting calendar time units random factors.","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"","code":"mixmodel_cal_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ci Boolean. Whether confidence intervals computed. Default=FALSE. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed regression model analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_cal_cont(data = trial_data, arm = 3, ci = TRUE) #> Computing profile confidence intervals ... #> Computing profile confidence intervals ... #> $p_val #> [1] 0.04602913 #>  #> $treat_effect #> [1] 0.2046252 #>  #> $lower_ci #> [1] -0.03110207 #>  #> $upper_ci #> [1] 0.4424338 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #> Linear mixed model fit by REML ['lmerModLmerTest'] #> Formula: response ~ as.factor(treatment) + (1 | cal_time) #>    Data: data_new #> REML criterion at convergence: 1393.687 #> Random effects: #>  Groups   Name        Std.Dev. #>  cal_time (Intercept) 0.1504   #>  Residual             0.9587   #> Number of obs: 500, groups:  cal_time, 20 #> Fixed Effects: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>                0.1312                 0.1990                 0.2410   #> as.factor(treatment)3   #>                0.2046   #>"},{"path":"/reference/mixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"function performs linear mixed model regression taking account trial data arm study leaves trial adjusting periods random factors.","code":""},{"path":"/reference/mixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"","code":"mixmodel_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ci Boolean. Whether confidence intervals computed. Default=FALSE. ncc Boolean. Whether include NCC data analysis. Default=TRUE. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/mixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/mixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed regression model analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_cont(data = trial_data, arm = 3, ci = TRUE) #> Computing profile confidence intervals ... #> Computing profile confidence intervals ... #> $p_val #> [1] 0.222103 #>  #> $treat_effect #> [1] 0.1007758 #>  #> $lower_ci #> [1] -0.147582 #>  #> $upper_ci #> [1] 0.3700406 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #> Linear mixed model fit by REML ['lmerModLmerTest'] #> Formula: response ~ as.factor(treatment) + (1 | period) #>    Data: data_new #> REML criterion at convergence: 1444.982 #> Random effects: #>  Groups   Name        Std.Dev. #>  period   (Intercept) 0.1208   #>  Residual             1.0159   #> Number of obs: 500, groups:  period, 4 #> Fixed Effects: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>               0.05695                0.31655                0.30695   #> as.factor(treatment)3   #>               0.10078   #>"},{"path":"/reference/piecewise_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting time using discontinuous piecewise polynomials calendar time unit.","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"","code":"piecewise_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   poly_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/piecewise_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'j'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. poly_degree Degree piecewise polynomial. Default=3. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time unit — piecewise_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  piecewise_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.1266747 #>  #> $treat_effect #> [1] 0.1574507 #>  #> $lower_ci #> [1] -0.1131274 #>  #> $upper_ci #> [1] 0.4280289 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + poly(j, degree = poly_degree,  #>     raw = TRUE) * as.factor(cal_time), data = data_new) #>  #> Coefficients: #>                                                      (Intercept)   #>                                                       -9.623e-01   #>                                            as.factor(treatment)1   #>                                                        3.342e-01   #>                                            as.factor(treatment)2   #>                                                        1.535e-01   #>                                            as.factor(treatment)3   #>                                                        1.575e-01   #>                       poly(j, degree = poly_degree, raw = TRUE)1   #>                                                        3.653e-01   #>                       poly(j, degree = poly_degree, raw = TRUE)2   #>                                                       -3.016e-02   #>                       poly(j, degree = poly_degree, raw = TRUE)3   #>                                                        6.978e-04   #>                                             as.factor(cal_time)2   #>                                                       -4.112e+01   #>                                             as.factor(cal_time)3   #>                                                       -1.978e+00   #>                                             as.factor(cal_time)4   #>                                                        4.679e+02   #>                                             as.factor(cal_time)5   #>                                                       -8.542e+02   #>                                             as.factor(cal_time)6   #>                                                       -6.413e+02   #>                                             as.factor(cal_time)7   #>                                                       -6.308e+02   #>                                             as.factor(cal_time)8   #>                                                       -9.922e+03   #>                                             as.factor(cal_time)9   #>                                                       -4.026e+02   #>                                            as.factor(cal_time)10   #>                                                        1.922e+03   #>                                            as.factor(cal_time)11   #>                                                       -1.045e+04   #>                                            as.factor(cal_time)12   #>                                                       -6.115e+01   #>                                            as.factor(cal_time)13   #>                                                       -3.492e+03   #>                                            as.factor(cal_time)14   #>                                                        3.718e+03   #>                                            as.factor(cal_time)15   #>                                                       -1.496e+04   #>                                            as.factor(cal_time)16   #>                                                        6.927e+04   #>                                            as.factor(cal_time)17   #>                                                       -5.375e+04   #>                                            as.factor(cal_time)18   #>                                                       -1.485e+04   #>                                            as.factor(cal_time)19   #>                                                       -4.565e+04   #>                                            as.factor(cal_time)20   #>                                                        7.872e+04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)2   #>                                                        2.939e+00   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)2   #>                                                       -5.525e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)2   #>                                                        2.631e-05   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)3   #>                                                       -4.018e-01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)3   #>                                                        3.348e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)3   #>                                                       -7.284e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)4   #>                                                       -1.679e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)4   #>                                                        2.221e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)4   #>                                                       -1.442e-03   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)5   #>                                                        2.264e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)5   #>                                                       -1.752e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)5   #>                                                       -8.890e-05   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)6   #>                                                        1.371e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)6   #>                                                       -7.246e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)6   #>                                                       -4.492e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)7   #>                                                        1.148e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)7   #>                                                       -4.390e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)7   #>                                                       -5.436e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)8   #>                                                        1.582e+02   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)8   #>                                                       -8.139e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)8   #>                                                        7.981e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)9   #>                                                        6.258e+00   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)9   #>                                                       -5.339e-03   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)9   #>                                                       -6.353e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)10   #>                                                       -2.525e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)10   #>                                                        1.376e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)10   #>                                                       -8.522e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)11   #>                                                        1.201e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)11   #>                                                       -4.324e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)11   #>                                                       -1.062e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)12   #>                                                       -2.648e-01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)12   #>                                                        3.171e-02   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)12   #>                                                       -7.018e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)13   #>                                                        3.243e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)13   #>                                                       -7.235e-02   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)13   #>                                                       -5.911e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)14   #>                                                       -3.293e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)14   #>                                                        1.252e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)14   #>                                                       -7.902e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)15   #>                                                        1.258e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)15   #>                                                       -3.244e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)15   #>                                                       -3.659e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)16   #>                                                       -5.354e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)16   #>                                                        1.408e+00   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)16   #>                                                       -1.880e-03   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)17   #>                                                        3.894e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)17   #>                                                       -9.121e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)17   #>                                                        6.142e-05   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)18   #>                                                        1.025e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)18   #>                                                       -2.073e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)18   #>                                                       -5.153e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)19   #>                                                        2.965e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)19   #>                                                       -6.133e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)19   #>                                                       -2.329e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)20   #>                                                       -4.859e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)20   #>                                                        1.028e+00   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)20   #>                                                       -1.382e-03   #>  #>"},{"path":"/reference/piecewise_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting time using discontinuous piecewise polynomials period.","code":""},{"path":"/reference/piecewise_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"","code":"piecewise_cont(   data,   arm,   alpha = 0.025,   ncc = TRUE,   poly_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/piecewise_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ncc Boolean. Whether include NCC data analysis. Default=TRUE. poly_degree Degree piecewise polynomial. Default=3. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/piecewise_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/piecewise_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"Pavla Krotka","code":""},{"path":"/reference/piecewise_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  piecewise_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.01981649 #>  #> $treat_effect #> [1] 0.2882365 #>  #> $lower_ci #> [1] 0.01372714 #>  #> $upper_ci #> [1] 0.5627458 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + poly(j, degree = poly_degree,  #>     raw = TRUE) * as.factor(period), data = data_new) #>  #> Coefficients: #>                                                   (Intercept)   #>                                                    -3.215e-01   #>                                         as.factor(treatment)1   #>                                                     3.215e-01   #>                                         as.factor(treatment)2   #>                                                     3.699e-01   #>                                         as.factor(treatment)3   #>                                                     2.882e-01   #>                    poly(j, degree = poly_degree, raw = TRUE)1   #>                                                     2.556e-02   #>                    poly(j, degree = poly_degree, raw = TRUE)2   #>                                                    -3.385e-04   #>                    poly(j, degree = poly_degree, raw = TRUE)3   #>                                                     1.071e-06   #>                                            as.factor(period)2   #>                                                    -3.162e+00   #>                                            as.factor(period)3   #>                                                    -6.666e+01   #>                                            as.factor(period)4   #>                                                    -6.469e+02   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)2   #>                                                     3.042e-02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)2   #>                                                     3.015e-05   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)2   #>                                                    -4.918e-07   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)3   #>                                                     5.991e-01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)3   #>                                                    -1.584e-03   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)3   #>                                                     8.830e-07   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)4   #>                                                     4.417e+00   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)4   #>                                                    -9.788e-03   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)4   #>                                                     6.595e-06   #>  #>"},{"path":"/reference/plot_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for visualizing the simulated trial — plot_trial","title":"Function for visualizing the simulated trial — plot_trial","text":"function creates plot visualizing trial progress time.","code":""},{"path":"/reference/plot_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for visualizing the simulated trial — plot_trial","text":"","code":"plot_trial(treatments)"},{"path":"/reference/plot_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for visualizing the simulated trial — plot_trial","text":"treatments Vector treatment indicators ordered time, e.g. column treatment dataframe resulting datasim_bin() datasim_cont() function.","code":""},{"path":"/reference/plot_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for visualizing the simulated trial — plot_trial","text":"ggplot showing trial progress time.","code":""},{"path":"/reference/plot_trial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function for visualizing the simulated trial — plot_trial","text":"Pavla Krotka","code":""},{"path":"/reference/plot_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for visualizing the simulated trial — plot_trial","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  plot_trial(treatments = trial_data$treatment)"},{"path":"/reference/poolmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled analysis for binary data — poolmodel_bin","title":"Pooled analysis for binary data — poolmodel_bin","text":"function performs pooled analysis (naively pooling concurrent non-concurrent controls without adjustment) using logistic model.","code":""},{"path":"/reference/poolmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled analysis for binary data — poolmodel_bin","text":"","code":"poolmodel_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/poolmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled analysis for binary data — poolmodel_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/poolmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pooled analysis for binary data — poolmodel_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms log-odds ratio lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/poolmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pooled analysis for binary data — poolmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/poolmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pooled analysis for binary data — poolmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  poolmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.001701632 #>  #> $treat_effect #> [1] 0.9344818 #>  #> $lower_ci #> [1] 0.3314689 #>  #> $upper_ci #> [1] 1.589668 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment), family = binomial,  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>                0.8001                 0.9345   #>  #> Degrees of Freedom: 299 Total (i.e. Null);  298 Residual #> Null Deviance:\t    341.7  #> Residual Deviance: 332.2 \tAIC: 336.2 #>"},{"path":"/reference/poolmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled analysis for continuous data — poolmodel_cont","title":"Pooled analysis for continuous data — poolmodel_cont","text":"function performs pooled analysis (naively pooling concurrent non-concurrent controls without adjustment) using linear model.","code":""},{"path":"/reference/poolmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled analysis for continuous data — poolmodel_cont","text":"","code":"poolmodel_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/poolmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled analysis for continuous data — poolmodel_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/poolmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pooled analysis for continuous data — poolmodel_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/poolmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pooled analysis for continuous data — poolmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/poolmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pooled analysis for continuous data — poolmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  poolmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 1.247195e-05 #>  #> $treat_effect #> [1] 0.5154147 #>  #> $lower_ci #> [1] 0.27857 #>  #> $upper_ci #> [1] 0.7522594 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment), data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>               0.04637                0.51541   #>  #>"},{"path":"/reference/seasonal_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of a seasonal trend — seasonal_trend","title":"Generation of a seasonal trend — seasonal_trend","text":"function generates time trend given time points trial according periodic function.","code":""},{"path":"/reference/seasonal_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of a seasonal trend — seasonal_trend","text":"","code":"seasonal_trend(j, lambda, n_wave, n_total)"},{"path":"/reference/seasonal_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of a seasonal trend — seasonal_trend","text":"j Time points trend generated. lambda Strength time trend. n_wave many cycles (waves) time trend (\\(\\psi\\)). n_total Total sample size trial.","code":""},{"path":"/reference/seasonal_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of a seasonal trend — seasonal_trend","text":"Time trend time points j.","code":""},{"path":"/reference/seasonal_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of a seasonal trend — seasonal_trend","text":"time trend generated according function \\(f(j) = \\lambda \\cdot \\mathrm{sin} \\big( \\psi \\cdot 2\\pi \\cdot \\frac{j-1}{N-1} \\big)\\), parameter \\(\\psi\\) corresponds input parameter n_wave.","code":""},{"path":"/reference/seasonal_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of a seasonal trend — seasonal_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"function performs separate analysis (taking account concurrent controls) using logistic model adjusting periods, treatment arm stays trial one period.","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"","code":"sepmodel_adj_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_adj_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms log-odds ratio lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  sepmodel_adj_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.2671918 #>  #> $treat_effect #> [1] 0.2592168 #>  #> $lower_ci #> [1] -0.556526 #>  #> $upper_ci #> [1] 1.093914 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3     as.factor(period)4   #>                1.9677                 0.2592                -0.4333   #>  #> Degrees of Freedom: 199 Total (i.e. Null);  197 Residual #> Null Deviance:\t    158.3  #> Residual Deviance: 156.8 \tAIC: 162.8 #>"},{"path":"/reference/sepmodel_adj_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"function performs separate analysis (taking account concurrent controls) using linear model adjusting periods, treatment arm stays trial one period.","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"","code":"sepmodel_adj_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_adj_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  sepmodel_adj_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.08654539 #>  #> $treat_effect #> [1] 0.1883682 #>  #> $lower_ci #> [1] -0.08331924 #>  #> $upper_ci #> [1] 0.4600556 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3     as.factor(period)4   #>               0.11607                0.18837                0.02364   #>  #>"},{"path":"/reference/sepmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for binary data — sepmodel_bin","title":"Separate analysis for binary data — sepmodel_bin","text":"function performs separate analysis (taking account concurrent controls) using logistic model.","code":""},{"path":"/reference/sepmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for binary data — sepmodel_bin","text":"","code":"sepmodel_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for binary data — sepmodel_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/sepmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for binary data — sepmodel_bin","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms log-odds ratio lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/sepmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for binary data — sepmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for binary data — sepmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  sepmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.2840541 #>  #> $treat_effect #> [1] 0.2182536 #>  #> $lower_ci #> [1] -0.5302686 #>  #> $upper_ci #> [1] 0.978984 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment), family = binomial,  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>                1.5163                 0.2183   #>  #> Degrees of Freedom: 199 Total (i.e. Null);  198 Residual #> Null Deviance:\t    179.1  #> Residual Deviance: 178.8 \tAIC: 182.8 #>"},{"path":"/reference/sepmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for continuous data — sepmodel_cont","title":"Separate analysis for continuous data — sepmodel_cont","text":"function performs separate analysis (taking account concurrent controls) using linear model.","code":""},{"path":"/reference/sepmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for continuous data — sepmodel_cont","text":"","code":"sepmodel_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for continuous data — sepmodel_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/sepmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for continuous data — sepmodel_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) model - fitted model","code":""},{"path":"/reference/sepmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for continuous data — sepmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for continuous data — sepmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  sepmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.0001982177 #>  #> $treat_effect #> [1] 0.4436418 #>  #> $lower_ci #> [1] 0.2008916 #>  #> $upper_ci #> [1] 0.6863919 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment), data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>              -0.04794                0.44364   #>  #>"},{"path":"/reference/sim_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"function performs simulation study given set scenarios, analyzing simulated data using different models indicated user. Performs inference indicated experimental treatment arms. Simulates probability reject \\(H_0\\) based given number replications.","code":""},{"path":"/reference/sim_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"","code":"sim_study(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"),   endpoint )"},{"path":"/reference/sim_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"nsim Number replications. Must larger 1. scenarios Data frame containing parameters scenarios simulated. arms Vector treatment arms perform inference . arms compared control group. Default - arms except first one. models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\"). Available models continuous endpoints : 'fixmodel', 'fixmodel_cal', 'gam', 'MAPprior', 'mixmodel', 'mixmodel_cal', 'mixmodel_AR1', 'mixmodel_AR1_cal', 'piecewise', 'piecewise_cal', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'splines', 'splines_cal', 'timemachine'. Available models binary endpoints : 'fixmodel', 'fixmodel_cal', 'MAPprior', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'timemachine'. endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints.","code":""},{"path":"/reference/sim_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"Data frame considered scenarios corresponding results - probability reject \\(H_0\\).","code":""},{"path":"/reference/sim_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"Pavla Krotka","code":""},{"path":"/reference/sim_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function performing simulation studies for a given set of scenarios (not parallelized) — sim_study","text":"","code":"# Create data frame with all parameters: sim_scenarios <- data.frame(num_arms = 4, n_arm = 250, d1 = 250*0, d2 = 250*1, d3 = 250*2, d4 = 250*3, period_blocks = 2, mu0 = 0, sigma = 1, theta1 = 0, theta2 = 0, theta3 = 0, theta4 = 0, lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2), trend = c(rep(\"linear\", 9), rep(\"stepwise_2\", 9)), alpha = 0.025, ncc = TRUE)  # Run simulation study: sim_results <- sim_study(nsim = 10, scenarios = sim_scenarios, arms = c(3, 4), models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"), endpoint = \"cont\") #> [1] \"Starting the simulations. 18 scenarios will be simulated. Starting time: 2023-02-15 17:32:43\" #> [1] \"Scenario 1/18 done. Time: 2023-02-15 17:32:43\" #> [1] \"Scenario 2/18 done. Time: 2023-02-15 17:32:43\" #> [1] \"Scenario 3/18 done. Time: 2023-02-15 17:32:44\" #> [1] \"Scenario 4/18 done. Time: 2023-02-15 17:32:44\" #> [1] \"Scenario 5/18 done. Time: 2023-02-15 17:32:44\" #> [1] \"Scenario 6/18 done. Time: 2023-02-15 17:32:45\" #> [1] \"Scenario 7/18 done. Time: 2023-02-15 17:32:45\" #> [1] \"Scenario 8/18 done. Time: 2023-02-15 17:32:45\" #> [1] \"Scenario 9/18 done. Time: 2023-02-15 17:32:46\" #> [1] \"Scenario 10/18 done. Time: 2023-02-15 17:32:46\" #> [1] \"Scenario 11/18 done. Time: 2023-02-15 17:32:46\" #> [1] \"Scenario 12/18 done. Time: 2023-02-15 17:32:46\" #> [1] \"Scenario 13/18 done. Time: 2023-02-15 17:32:47\" #> [1] \"Scenario 14/18 done. Time: 2023-02-15 17:32:47\" #> [1] \"Scenario 15/18 done. Time: 2023-02-15 17:32:47\" #> [1] \"Scenario 16/18 done. Time: 2023-02-15 17:32:48\" #> [1] \"Scenario 17/18 done. Time: 2023-02-15 17:32:48\" #> [1] \"Scenario 18/18 done. Time: 2023-02-15 17:32:48\"  # View results: head(sim_results) #>   num_arms n_arm d1  d2  d3  d4 period_blocks mu0 sigma theta1 theta2 theta3 #> 1        4   250  0 250 500 750             2   0     1      0      0      0 #> 2        4   250  0 250 500 750             2   0     1      0      0      0 #> 3        4   250  0 250 500 750             2   0     1      0      0      0 #> 4        4   250  0 250 500 750             2   0     1      0      0      0 #> 5        4   250  0 250 500 750             2   0     1      0      0      0 #> 6        4   250  0 250 500 750             2   0     1      0      0      0 #>   theta4 lambda0 lambda1 lambda2 lambda3 lambda4  trend alpha  ncc study_arm #> 1      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         3 #> 2      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         3 #> 3      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         3 #> 4      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         4 #> 5      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         4 #> 6      0   -0.15   -0.15   -0.15   -0.15   -0.15 linear 0.025 TRUE         4 #>       model reject_h0 failed nsim #> 1  fixmodel       0.1      0   10 #> 2 poolmodel       0.1      0   10 #> 3  sepmodel       0.1      0   10 #> 4  fixmodel       0.1      0   10 #> 5 poolmodel       0.1      0   10 #> 6  sepmodel       0.1      0   10"},{"path":"/reference/sim_study_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"function performs simulation study given set scenarios, analyzing simulated data using different models indicated user. Performs inference indicated experimental treatment arms. Simulates probability reject \\(H_0\\), bias, well mean squared error (MSE) treatment effect estimates based given number replications.","code":""},{"path":"/reference/sim_study_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"","code":"sim_study_par(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"),   endpoint,   perc_cores = 0.9 )"},{"path":"/reference/sim_study_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"nsim Number replications. Must larger 1. scenarios Data frame containing parameters scenarios simulated. arms Vector treatment arms perform inference . arms compared control group. Default - arms except first one. models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\"). Available models continuous endpoints : 'fixmodel', 'fixmodel_cal', 'gam', 'MAPprior', 'mixmodel', 'mixmodel_cal', 'mixmodel_AR1', 'mixmodel_AR1_cal', 'piecewise', 'piecewise_cal', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'splines', 'splines_cal', 'timemachine'. Available models binary endpoints : 'fixmodel', 'fixmodel_cal', 'MAPprior', 'poolmodel', 'sepmodel', 'sepmodel_adj', 'timemachine'. endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints. perc_cores percentage available cores used simulations. Default=0.9.","code":""},{"path":"/reference/sim_study_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"Data frame considered scenarios corresponding results - probability reject \\(H_0\\), bias, well mean squared error (MSE) treatment effect estimates.","code":""},{"path":"/reference/sim_study_par.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"Pavla Krotka","code":""},{"path":"/reference/sim_study_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"","code":"# Create data frame with all parameters: sim_scenarios <- data.frame(num_arms = 4, n_arm = 250, d1 = 250*0, d2 = 250*1, d3 = 250*2, d4 = 250*3, period_blocks = 2, mu0 = 0, sigma = 1, theta1 = 0, theta2 = 0, theta3 = 0, theta4 = 0, lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2), lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2), trend = c(rep(\"linear\", 9), rep(\"stepwise_2\", 9)), alpha = 0.025, ncc = TRUE)  # Run simulation study: # sim_results <- sim_study_par(nsim = 100, scenarios = sim_scenarios, arms = c(3, 4), # models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"), endpoint = \"cont\")"},{"path":"/reference/splines_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting time using regression splines knots placed according calendar time units.","code":""},{"path":"/reference/splines_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"","code":"splines_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   bs_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/splines_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'j'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. unit_size Number patients per calendar time unit. Default=25. ncc Boolean. Whether include NCC data analysis. Default=TRUE. bs_degree Degree polynomial spline. Default=3 cubic spline. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/splines_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) knots - positions knots terms patient index model - fitted model","code":""},{"path":"/reference/splines_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/splines_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spline regression analysis for continuous data with knots placed according to calendar time units — splines_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  splines_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.4995146 #>  #> $treat_effect #> [1] 0.0001694468 #>  #> $lower_ci #> [1] -0.273353 #>  #> $upper_ci #> [1] 0.2736919 #>  #> $reject_h0 #> [1] FALSE #>  #> $knots #>  [1]  25  50  75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475 #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + bs(j, knots = bs_knots,  #>     degree = bs_degree), data = data_new) #>  #> Coefficients: #>                                   (Intercept)   #>                                     0.1717068   #>                         as.factor(treatment)1   #>                                     0.5588439   #>                         as.factor(treatment)2   #>                                     0.2567450   #>                         as.factor(treatment)3   #>                                     0.0001694   #>  bs(j, knots = bs_knots, degree = bs_degree)1   #>                                    -0.7955271   #>  bs(j, knots = bs_knots, degree = bs_degree)2   #>                                     0.4986849   #>  bs(j, knots = bs_knots, degree = bs_degree)3   #>                                    -0.8074887   #>  bs(j, knots = bs_knots, degree = bs_degree)4   #>                                    -0.0997851   #>  bs(j, knots = bs_knots, degree = bs_degree)5   #>                                     0.2138196   #>  bs(j, knots = bs_knots, degree = bs_degree)6   #>                                    -0.7276411   #>  bs(j, knots = bs_knots, degree = bs_degree)7   #>                                     0.0440971   #>  bs(j, knots = bs_knots, degree = bs_degree)8   #>                                    -0.8751767   #>  bs(j, knots = bs_knots, degree = bs_degree)9   #>                                    -0.7309363   #> bs(j, knots = bs_knots, degree = bs_degree)10   #>                                     0.3912914   #> bs(j, knots = bs_knots, degree = bs_degree)11   #>                                    -0.0951116   #> bs(j, knots = bs_knots, degree = bs_degree)12   #>                                     0.1349507   #> bs(j, knots = bs_knots, degree = bs_degree)13   #>                                    -0.0256759   #> bs(j, knots = bs_knots, degree = bs_degree)14   #>                                    -0.0744590   #> bs(j, knots = bs_knots, degree = bs_degree)15   #>                                     0.0093343   #> bs(j, knots = bs_knots, degree = bs_degree)16   #>                                    -0.1152761   #> bs(j, knots = bs_knots, degree = bs_degree)17   #>                                     0.3229906   #> bs(j, knots = bs_knots, degree = bs_degree)18   #>                                     0.4538938   #> bs(j, knots = bs_knots, degree = bs_degree)19   #>                                     0.2148373   #> bs(j, knots = bs_knots, degree = bs_degree)20   #>                                     0.5121031   #> bs(j, knots = bs_knots, degree = bs_degree)21   #>                                     0.4062829   #> bs(j, knots = bs_knots, degree = bs_degree)22   #>                                    -0.8903346   #>  #>"},{"path":"/reference/splines_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"function performs linear regression taking account trial data arm study leaves trial adjusting time using regression splines knots placed according periods.","code":""},{"path":"/reference/splines_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"","code":"splines_cont(   data,   arm,   alpha = 0.025,   ncc = TRUE,   bs_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/splines_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. ncc Boolean. Whether include NCC data analysis. Default=TRUE. bs_degree Degree polynomial spline. Default=3 cubic spline. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/splines_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"List containing following elements regarding results comparing arm control: p-val - p-value (one-sided) treat_effect - estimated treatment effect terms difference means lower_ci - lower limit 95% confidence interval upper_ci - upper limit 95% confidence interval reject_h0 - indicator whether null hypothesis rejected (p_val < alpha) knots - positions knots terms patient index model - fitted model","code":""},{"path":"/reference/splines_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"Pavla Krotka","code":""},{"path":"/reference/splines_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spline regression analysis for continuous data with knots placed according to periods — splines_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  splines_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.01736294 #>  #> $treat_effect #> [1] 0.2774349 #>  #> $lower_ci #> [1] 0.01999686 #>  #> $upper_ci #> [1] 0.534873 #>  #> $reject_h0 #> [1] TRUE #>  #> $knots #> [1] 100 250 400 #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + bs(j, knots = bs_knots,  #>     degree = bs_degree), data = data_new) #>  #> Coefficients: #>                                  (Intercept)   #>                                      -0.7202   #>                        as.factor(treatment)1   #>                                       0.1188   #>                        as.factor(treatment)2   #>                                       0.2523   #>                        as.factor(treatment)3   #>                                       0.2774   #> bs(j, knots = bs_knots, degree = bs_degree)1   #>                                       1.3353   #> bs(j, knots = bs_knots, degree = bs_degree)2   #>                                       1.0121   #> bs(j, knots = bs_knots, degree = bs_degree)3   #>                                       0.7848   #> bs(j, knots = bs_knots, degree = bs_degree)4   #>                                       0.5357   #> bs(j, knots = bs_knots, degree = bs_degree)5   #>                                       1.2086   #> bs(j, knots = bs_knots, degree = bs_degree)6   #>                                       0.6964   #>  #>"},{"path":"/reference/sw_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of stepwise trend with equal jumps between periods — sw_trend","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"function generates stepwise trend given period. time trend assumed first period.","code":""},{"path":"/reference/sw_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"","code":"sw_trend(cj, lambda)"},{"path":"/reference/sw_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"cj Period indicator. lambda Strength time trend.","code":""},{"path":"/reference/sw_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"Time trend period \\(c_j\\).","code":""},{"path":"/reference/sw_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"time trend generated according function \\(f(j) = \\lambda \\cdot (c_j - 1)\\).","code":""},{"path":"/reference/sw_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/sw_trend2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Generates stepwise trend given period. Jump sizes adapted period sample size.","code":""},{"path":"/reference/sw_trend2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"","code":"sw_trend2(cj, lambda, ss_period, ss_total)"},{"path":"/reference/sw_trend2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"cj Period indicator. lambda Strength time trend. ss_period Sample size given period. ss_total Total sample size.","code":""},{"path":"/reference/sw_trend2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Time trend period \\(c_j\\).","code":""},{"path":"/reference/sw_trend2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/timemachine_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Time machine analysis for binary data — timemachine_bin","title":"Time machine analysis for binary data — timemachine_bin","text":"function performs analysis binary data using Time Machine approach. takes account data investigated arm leaves trial. based logsitic regression treatment categorical variable covariate adjustment time via second-order Bayesian normal dynamic linear model (separating trial buckets pre-defined size).","code":""},{"path":"/reference/timemachine_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time machine analysis for binary data — timemachine_bin","text":"","code":"timemachine_bin(   data,   arm,   alpha = 0.025,   prec_theta = 0.001,   prec_eta = 0.001,   tau_a = 0.1,   tau_b = 0.01,   bucket_size = 25,   check = TRUE,   ... )"},{"path":"/reference/timemachine_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time machine analysis for binary data — timemachine_bin","text":"data Trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. prec_theta Precision (\\(1/\\sigma^2_{\\theta}\\)) prior regarding treatment effect \\(\\theta\\). .e. \\(\\theta \\sim N(0, \\sigma^2_{\\theta})\\) . Default=0.001. prec_eta Precision (\\(1/\\sigma^2_{\\eta_0}\\)) prior regarding control log-odds \\(\\eta_0\\) (corresponds p0 datasim_bin() function). .e. \\(\\eta_0 \\sim N(0, \\sigma^2_{\\eta_0})\\). Default=0.001. tau_a Parameter \\(\\) Gamma distribution precision parameter \\(\\tau\\) model time trend. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.1. tau_b Parameter \\(b\\) Gamma distribution precision parameter \\(\\tau\\) model time trend. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.01. bucket_size Number patients per time bucket. Default=25. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/timemachine_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time machine analysis for binary data — timemachine_bin","text":"List containing following elements regarding results comparing arm control: p-val - posterior probability log-odds ratio less zero treat_effect - posterior mean log-odds ratio lower_ci - lower limit 95% credible interval log-odds ratio upper_ci - upper limit 95% credible interval log-odds ratio reject_h0 - indicator whether null hypothesis rejected (p_val < alpha)","code":""},{"path":"/reference/timemachine_bin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time machine analysis for binary data — timemachine_bin","text":"Bayesian Time Machine: Accounting Temporal Drift Multi-arm Platform Trials. Saville, B. R., Berry, D. ., et al. Clinical Trials 19.5 (2022): 490-501.","code":""},{"path":"/reference/timemachine_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time machine analysis for binary data — timemachine_bin","text":"Dominic Magirr, Peter Jacko","code":""},{"path":"/reference/timemachine_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time machine analysis for binary data — timemachine_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  timemachine_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.06316667 #>  #> $treat_effect #> [1] 0.5201785 #>  #> $lower_ci #> [1] -0.1362801 #>  #> $upper_ci #> [1] 1.199135 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/timemachine_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Time machine analysis for continuous data — timemachine_cont","title":"Time machine analysis for continuous data — timemachine_cont","text":"function performs analysis continuous data using Time Machine approach. takes account data investigated arm leaves trial. based linear regression treatment categorical variable covariate adjustment time via second-order Bayesian normal dynamic linear model (separating trial buckets pre-defined size).","code":""},{"path":"/reference/timemachine_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time machine analysis for continuous data — timemachine_cont","text":"","code":"timemachine_cont(   data,   arm,   alpha = 0.025,   prec_theta = 0.001,   prec_eta = 0.001,   tau_a = 0.1,   tau_b = 0.01,   prec_a = 0.001,   prec_b = 0.001,   bucket_size = 25,   check = TRUE,   ... )"},{"path":"/reference/timemachine_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time machine analysis for continuous data — timemachine_cont","text":"data Trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period'. arm Indicator treatment arm study perform inference (vector length 1). arm compared control group. alpha Significance level. Default=0.025. prec_theta Precision (\\(1/\\sigma^2_{\\theta}\\)) prior regarding treatment effect \\(\\theta\\). .e. \\(\\theta \\sim N(0, \\sigma^2_{\\theta})\\). Default=0.001. prec_eta Precision (\\(1/\\sigma^2_{\\eta_0}\\)) prior regarding control mean \\(\\eta_0\\) (corresponds mu0 datasim_cont() function). .e. \\(\\eta_0 \\sim N(0, \\sigma^2_{\\eta_0})\\). Default=0.001. tau_a Parameter \\(\\) Gamma distribution precision parameter \\(\\tau\\) model time trend. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.1. tau_b Parameter \\(b\\) Gamma distribution precision parameter \\(\\tau\\) model time trend. .e., \\(\\tau \\sim Gamma(,b)\\). Default=0.01. prec_a Parameter \\(\\) Gamma distribution regarding precision responses. .e., \\(\\sigma \\sim Gamma(,b)\\). Default=0.001. prec_b Parameter \\(b\\) Gamma distribution regarding precision responses. .e., \\(\\sigma \\sim Gamma(,b)\\). Default=0.001. bucket_size Number patients per time bucket. Default=25. check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE. ... arguments simulation function.","code":""},{"path":"/reference/timemachine_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time machine analysis for continuous data — timemachine_cont","text":"List containing following elements regarding results comparing arm control: p-val - posterior probability difference means less zero treat_effect - posterior mean difference means lower_ci - lower limit 95% credible interval difference means upper_ci - upper limit 95% credible interval difference means reject_h0 - indicator whether null hypothesis rejected (p_val < alpha)","code":""},{"path":"/reference/timemachine_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time machine analysis for continuous data — timemachine_cont","text":"Dominic Magirr, Peter Jacko","code":""},{"path":"/reference/timemachine_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time machine analysis for continuous data — timemachine_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  timemachine_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.3616333 #>  #> $treat_effect #> [1] 0.05045769 #>  #> $lower_ci #> [1] -0.2245731 #>  #> $upper_ci #> [1] 0.3277567 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/TT_all_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"Analyzes given data using different models indicated user. Compares two indicated treatment arms.","code":""},{"path":"/reference/TT_all_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"","code":"TT_all_models(   data,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint,   alpha = 0.025 )"},{"path":"/reference/TT_all_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"data Simulated trial data, e.g. result datasim_bin() datasim_cont() function. arms Indicator treatment arms compared (vector length 2). models Vector models used analysis. Default=c(\"fixmodel\", \"indirect\"). endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints. alpha Type error rate. Default=0.025.","code":""},{"path":"/reference/TT_all_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"List containing indicator whether null hypothesis rejected investigated treatment models.","code":""},{"path":"/reference/TT_all_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"Pavla Krotka","code":""},{"path":"/reference/TT_all_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for simulations performing inference on given treatment arms using given models (treatment-treatment comparisons) — TT_all_models","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_all_models(data = trial_data, arms = c(1,3), endpoint = \"cont\") #> $reject_h0_fixmodel #> [1] FALSE #>  #> $reject_h0_indirect #> [1] FALSE #>"},{"path":"/reference/TT_fixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"Performs linear regression compare two treatments taking account trial data last arm study leaves trial adjusting periods factors","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"","code":"TT_fixmodel_cont(data, arms, alpha = 0.025, ...)"},{"path":"/reference/TT_fixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function arms Indicator treatment arms compared (vector length 2) alpha Type error. Default=0.025 ... arguments simulation function","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"List containing p-value (one-sided), estimated difference treatments, 95% confidence interval, indicator whether null hypothesis rejected investigated comparison fitted model","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_fixmodel_cont(data = trial_data, arms = c(1,3)) #> $p_val #> [1] 0.1040359 #>  #> $est_diff #> [1] 0.235088 #>  #> $lower_ci #> [1] -0.1313414 #>  #> $upper_ci #> [1] 0.6015173 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)0  as.factor(treatment)2   #>               0.28980               -0.07148                0.05970   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>               0.23509               -0.05917               -0.04393   #>    as.factor(period)4   #>              -0.23857   #>  #>"},{"path":"/reference/TT_indirect_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"Performs indirect comparison two treatments","code":""},{"path":"/reference/TT_indirect_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"","code":"TT_indirect_cont(data, arms, alpha = 0.025, ...)"},{"path":"/reference/TT_indirect_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"data Simulated trial data, e.g. result datasim_cont() function arms Indicator treatment arms compared (vector length 2) alpha Type error. Default=0.025 ... arguments simulation function","code":""},{"path":"/reference/TT_indirect_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"List containing p-value (one-sided), estimated difference treatments indicator whether null hypothesis rejected investigated comparison","code":""},{"path":"/reference/TT_indirect_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"Pavla Krotka","code":""},{"path":"/reference/TT_indirect_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_indirect_cont(data = trial_data, arms = c(1,3)) #> $p_val #> [1] 0.5223811 #>  #> $est_diff #> [1] -0.01103416 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/TT_sim_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model indirect comparison. Compares indicated treatment arms.","code":""},{"path":"/reference/TT_sim_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"","code":"TT_sim_study(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint )"},{"path":"/reference/TT_sim_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Indicator treatment arms compared (vector length 2) models Vector models used analysis. Default=c(\"fixmodel\", \"indirect\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints","code":""},{"path":"/reference/TT_sim_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/TT_sim_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Pavla Krotka","code":""},{"path":"/reference/TT_sim_study_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model indirect comparison. Compares indicated treatment arms.","code":""},{"path":"/reference/TT_sim_study_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"","code":"TT_sim_study_par(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint,   perc_cores = 0.9 )"},{"path":"/reference/TT_sim_study_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Indicator treatment arms compared (vector length 2) models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAPprior\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints","code":""},{"path":"/reference/TT_sim_study_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/TT_sim_study_par.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Pavla Krotka","code":""}]
