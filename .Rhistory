row_spec(0, bold = T) %>%
column_spec(1, bold = T)
kable(data.frame("Assumption" = c("Large jump"),
"Expected jump" = c(10/100),
"Maximal jump" = c(15/100),
"tau_a" = unname(from_jump_size_to_tau_a_b(e_jump_size = 10/100, max_jump_size = 15/100)[1]),
"tau_b" = unname(from_jump_size_to_tau_a_b(e_jump_size = 10/100, max_jump_size = 15/100)[2]),
check.names = F),
escape = F, booktabs = F, align = "c") %>%
kable_classic(full_width = F) %>%
kable_styling(bootstrap_options = "bordered") %>%
row_spec(0, bold = T) %>%
column_spec(1, bold = T)
?NCC::sim_study_par
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
ncc = TRUE)
sim_scenarios$f
"w" %in% colnames(sim_scenarios)
is.data.frame(sim_scenarios)
sim_scenarios$w <- 0
View(sim_scenarios)
?NCC::gam_cont
?splines_cal_cont
?NCC::splines_cal_cont
?NCC::splines_cont
?NCC::MAPprior_bin
?NCC::MAPprior_cont
?NCC::timemachine_bin
?NCC::timemachine_cont
models = c("fixmodel", "sepmodel", "poolmodel")
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
ncc = TRUE)
((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal") | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models))
& ("ncc" %in% colnames(scenarios)))==FALSE
("fixmodel" %in% models)
if(((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal") | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models))
& ("ncc" %in% colnames(scenarios)))==FALSE){
scenarios$ncc <- TRUE
}
if(((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal") | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
if((    ("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal") | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)   ) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
("ncc" %in% colnames(scenarios))==FALSE
("fixmodel" %in% models) | ("fixmodel_cal" %in% models)
("mixmodel" %in% models) | ("mixmodel_cal" %in% models)
("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal")
if((    ("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)   ) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025)
View(scenarios)
if((    ("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)   ) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
if(("alpha" %in% colnames(scenarios))==FALSE){
scenarios$alpha <- 0.025
}
models <- c("fixmodel", "mixmodel_cal")
if(((("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("gam" %in% models) )
& ("ci" %in% colnames(scenarios)))==FALSE){
scenarios$ci <- FALSE
}
View(scenarios)
if(((("fixmodel_cal" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise_cal" %in% models) | ("splines_cal" %in% models))
& ("unit_size" %in% colnames(scenarios)))==FALSE){
scenarios$unit_size <- TRUE
}
models <- c(models, "gam")
if(("gam" %in% models) & ("smoothing_basis" %in% colnames(scenarios))==FALSE){
scenarios$smoothing_basis <- "tp"
}
if(("gam" %in% models) & ("basis_dim" %in% colnames(scenarios))==FALSE){
scenarios$basis_dim <- -1
}
if(("gam" %in% models) & ("gam_method" %in% colnames(scenarios))==FALSE){
scenarios$gam_method <- "GCV.Cp"
}
if(("gam" %in% models) & ("gam_method" %in% colnames(scenarios))==FALSE){
scenarios$gam_method <- "GCV.Cp"
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
bs_degree = 1)
models <- c(models, "splines")
if((("splines" %in% models) | ("splines_cal" %in% models)) & ("bs_degree" %in% colnames(scenarios))==FALSE){
scenarios$bs_degree <- 3
}
if((("piecewise" %in% models) | ("piecewise_cal" %in% models)) & ("poly_degree" %in% colnames(scenarios))==FALSE){
scenarios$poly_degree <- 3
}
models <- c(models, "piecewise")
if((("piecewise" %in% models) | ("piecewise_cal" %in% models)) & ("poly_degree" %in% colnames(scenarios))==FALSE){
scenarios$poly_degree <- 3
}
& ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
View(scenarios)
& ("unit_size" %in% colnames(scenarios))==FALSE){
scenarios$unit_size <- 25
}
if((("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("gam" %in% models))
& ("ci" %in% colnames(scenarios))==FALSE){
scenarios$ci <- FALSE
}
if((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models))
& ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
& ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
& ("unit_size" %in% colnames(scenarios))==FALSE){
scenarios$unit_size <- 25
}
if((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
if((("fixmodel_cal" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise_cal" %in% models) | ("splines_cal" %in% models)) & ("unit_size" %in% colnames(scenarios))==FALSE){
scenarios$unit_size <- 25
}
if((("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("gam" %in% models)) & ("ci" %in% colnames(scenarios))==FALSE){
scenarios$ci <- FALSE
}
if(("gam" %in% models) & ("smoothing_basis" %in% colnames(scenarios))==FALSE){
scenarios$smoothing_basis <- "tp"
}
models <- c(models, "MAPprior")
if(("MAPprior" %in% models) & ("opt" %in% colnames(scenarios))==FALSE){
scenarios$opt <- 2
}
if(("MAPprior" %in% models) & ("prior_prec_tau" %in% colnames(scenarios))==FALSE){
scenarios$prior_prec_tau <- 4
}
if(("MAPprior" %in% models) & ("prior_prec_eta" %in% colnames(scenarios))==FALSE){
scenarios$prior_prec_eta <- 0.001
}
if(("MAPprior" %in% models) & ("n.samples" %in% colnames(scenarios))==FALSE){
scenarios$n.samples <- 1000
}
if(("MAPprior" %in% models) & ("n.chains" %in% colnames(scenarios))==FALSE){
scenarios$n.chains <- 4
}
if(("MAPprior" %in% models) & ("n.iter" %in% colnames(scenarios))==FALSE){
scenarios$n.iter <- 4000
}
if(("MAPprior" %in% models) & ("n.adapt" %in% colnames(scenarios))==FALSE){
scenarios$n.adapt <- 1000
}
if(("MAPprior" %in% models) & ("robustify" %in% colnames(scenarios))==FALSE){
scenarios$robustify <- TRUE
}
if(("MAPprior" %in% models) & ("weight" %in% colnames(scenarios))==FALSE){
scenarios$weight <- 0.1
}
models <- c(models, "timemachine")
if(("timemachine" %in% models) & ("prec_theta" %in% colnames(scenarios))==FALSE){
scenarios$prec_theta <- 0.001
}
if(("timemachine" %in% models) & ("prec_eta" %in% colnames(scenarios))==FALSE){
scenarios$prec_eta <- 0.001
}
if(("timemachine" %in% models) & ("tau_a" %in% colnames(scenarios))==FALSE){
scenarios$tau_a <- 0.1
}
if(("timemachine" %in% models) & ("tau_b" %in% colnames(scenarios))==FALSE){
scenarios$tau_b <- 0.01
}
if(("timemachine" %in% models) & ("bucket_size" %in% colnames(scenarios))==FALSE){
scenarios$bucket_size <- 25
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_a" %in% colnames(scenarios))==FALSE){
scenarios$prec_a <- 0.001
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_b" %in% colnames(scenarios))==FALSE){
scenarios$prec_b <- 0.001
}
endpoint <- "cont"
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_a" %in% colnames(scenarios))==FALSE){
scenarios$prec_a <- 0.001
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_b" %in% colnames(scenarios))==FALSE){
scenarios$prec_b <- 0.001
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(("alpha" %in% colnames(scenarios))==FALSE){
scenarios$alpha <- 0.025
}
?datasim_bin
?NCC::datasim_bin
?NCC::datasim_cont
endpoint=="cont" & ("mu0" %in% colnames(scenarios))==FALSE
sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios))
sum(c(("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios))==FALSE)
sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE)
c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE
?NCC::datasim_bin
scenarios$trend
("inv_u" %in% scenarios$trend)
("N_peak" %in% colnames(scenarios)
)
as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
grepl("^d\\d", colnames(scenarios))
sum(grepl("^d\\d", colnames(scenarios)))
max(scenarios$num_arms)
sum(grepl("^d\\d", colnames(scenarios)))!=max(scenarios$num_arms)
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
grepl("^d\\d", colnames(scenarios))
sum(grepl("^d\\d", colnames(scenarios)))
endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)
sum(grepl("^theta\\d", colnames(scenarios)))
sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)
sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1
sum(grepl("^lambda\\d", colnames(scenarios)))
if(endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'theta' (columns must be named 'theta1', 'theta2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="bin" & sum(grepl("^OR\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'OR' (columns must be named 'OR1', 'OR2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+2){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
theta1 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(endpoint=="cont" & sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE)>0){
stop("The `scenarios` data frame must include the parameters 'num_arms', 'n_arm', 'd', 'theta', 'lambda', 'sigma' and 'trend'!")
}
if(endpoint=="bin" & sum(c("num_arms", "n_arm", "d1", "p0", "OR1", "lambda1", "trend") %in% colnames(scenarios)==FALSE)>0){
stop("The `scenarios` data frame must include the parameters 'num_arms', 'n_arm', 'd', 'p0', 'OR', 'lambda' and 'trend'!")
}
if(("inv_u" %in% scenarios$trend) & ("N_peak" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'inv_u', the parameter 'N_peak' must be specified!")
}
if(("seasonal" %in% scenarios$trend) & ("n_wave" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'seasonal', the parameter 'n_wave' must be specified!")
}
if(sum(grepl("^d\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'd' (columns must be named 'd1', 'd2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'theta' (columns must be named 'theta1', 'theta2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="bin" & sum(grepl("^OR\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'OR' (columns must be named 'OR1', 'OR2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
theta1 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("inv_u", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(("inv_u" %in% scenarios$trend) & ("N_peak" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'inv_u', the parameter 'N_peak' must be specified!")
}
library(NCC)
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,0,100,100))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,100,100))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,100,150))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,150,150))
66+32+2
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
library(NCC)
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,150,150))
library(NCC)
sim_study_par
?sim_study_par
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
ncc = TRUE)
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "poolmodel"), endpoint = "bin")
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "poolmodel"), endpoint = "cont")
View(sim_results)
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "timemachine"), endpoint = "cont")
View(sim_results)
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
View(sim_results)
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
sigma = 1,
theta1 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
