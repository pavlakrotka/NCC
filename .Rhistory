scenarios$unit_size <- 25
}
if((("fixmodel" %in% models) | ("fixmodel_cal" %in% models) | ("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise" %in% models) | ("piecewise_cal" %in% models) | ("splines" %in% models) | ("splines_cal" %in% models)) & ("ncc" %in% colnames(scenarios))==FALSE){
scenarios$ncc <- TRUE
}
if((("fixmodel_cal" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("piecewise_cal" %in% models) | ("splines_cal" %in% models)) & ("unit_size" %in% colnames(scenarios))==FALSE){
scenarios$unit_size <- 25
}
if((("mixmodel" %in% models) | ("mixmodel_cal" %in% models) | ("mixmodel_AR1" %in% models) | ("mixmodel_AR1_cal" %in% models) | ("gam" %in% models)) & ("ci" %in% colnames(scenarios))==FALSE){
scenarios$ci <- FALSE
}
if(("gam" %in% models) & ("smoothing_basis" %in% colnames(scenarios))==FALSE){
scenarios$smoothing_basis <- "tp"
}
models <- c(models, "MAPprior")
if(("MAPprior" %in% models) & ("opt" %in% colnames(scenarios))==FALSE){
scenarios$opt <- 2
}
if(("MAPprior" %in% models) & ("prior_prec_tau" %in% colnames(scenarios))==FALSE){
scenarios$prior_prec_tau <- 4
}
if(("MAPprior" %in% models) & ("prior_prec_eta" %in% colnames(scenarios))==FALSE){
scenarios$prior_prec_eta <- 0.001
}
if(("MAPprior" %in% models) & ("n.samples" %in% colnames(scenarios))==FALSE){
scenarios$n.samples <- 1000
}
if(("MAPprior" %in% models) & ("n.chains" %in% colnames(scenarios))==FALSE){
scenarios$n.chains <- 4
}
if(("MAPprior" %in% models) & ("n.iter" %in% colnames(scenarios))==FALSE){
scenarios$n.iter <- 4000
}
if(("MAPprior" %in% models) & ("n.adapt" %in% colnames(scenarios))==FALSE){
scenarios$n.adapt <- 1000
}
if(("MAPprior" %in% models) & ("robustify" %in% colnames(scenarios))==FALSE){
scenarios$robustify <- TRUE
}
if(("MAPprior" %in% models) & ("weight" %in% colnames(scenarios))==FALSE){
scenarios$weight <- 0.1
}
models <- c(models, "timemachine")
if(("timemachine" %in% models) & ("prec_theta" %in% colnames(scenarios))==FALSE){
scenarios$prec_theta <- 0.001
}
if(("timemachine" %in% models) & ("prec_eta" %in% colnames(scenarios))==FALSE){
scenarios$prec_eta <- 0.001
}
if(("timemachine" %in% models) & ("tau_a" %in% colnames(scenarios))==FALSE){
scenarios$tau_a <- 0.1
}
if(("timemachine" %in% models) & ("tau_b" %in% colnames(scenarios))==FALSE){
scenarios$tau_b <- 0.01
}
if(("timemachine" %in% models) & ("bucket_size" %in% colnames(scenarios))==FALSE){
scenarios$bucket_size <- 25
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_a" %in% colnames(scenarios))==FALSE){
scenarios$prec_a <- 0.001
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_b" %in% colnames(scenarios))==FALSE){
scenarios$prec_b <- 0.001
}
endpoint <- "cont"
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_a" %in% colnames(scenarios))==FALSE){
scenarios$prec_a <- 0.001
}
if(("timemachine" %in% models) & endpoint=="cont" & ("prec_b" %in% colnames(scenarios))==FALSE){
scenarios$prec_b <- 0.001
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(("alpha" %in% colnames(scenarios))==FALSE){
scenarios$alpha <- 0.025
}
?datasim_bin
?NCC::datasim_bin
?NCC::datasim_cont
endpoint=="cont" & ("mu0" %in% colnames(scenarios))==FALSE
sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios))
sum(c(("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios))==FALSE)
sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE)
c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE
?NCC::datasim_bin
scenarios$trend
("inv_u" %in% scenarios$trend)
("N_peak" %in% colnames(scenarios)
)
as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
grepl("^d\\d", colnames(scenarios))
sum(grepl("^d\\d", colnames(scenarios)))
max(scenarios$num_arms)
sum(grepl("^d\\d", colnames(scenarios)))!=max(scenarios$num_arms)
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
grepl("^d\\d", colnames(scenarios))
sum(grepl("^d\\d", colnames(scenarios)))
endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)
sum(grepl("^theta\\d", colnames(scenarios)))
sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)
sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1
sum(grepl("^lambda\\d", colnames(scenarios)))
if(endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'theta' (columns must be named 'theta1', 'theta2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="bin" & sum(grepl("^OR\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'OR' (columns must be named 'OR1', 'OR2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+2){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
theta1 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(endpoint=="cont" & sum(c("num_arms", "n_arm", "d1", "theta1", "lambda1", "sigma", "trend") %in% colnames(scenarios)==FALSE)>0){
stop("The `scenarios` data frame must include the parameters 'num_arms', 'n_arm', 'd', 'theta', 'lambda', 'sigma' and 'trend'!")
}
if(endpoint=="bin" & sum(c("num_arms", "n_arm", "d1", "p0", "OR1", "lambda1", "trend") %in% colnames(scenarios)==FALSE)>0){
stop("The `scenarios` data frame must include the parameters 'num_arms', 'n_arm', 'd', 'p0', 'OR', 'lambda' and 'trend'!")
}
if(("inv_u" %in% scenarios$trend) & ("N_peak" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'inv_u', the parameter 'N_peak' must be specified!")
}
if(("seasonal" %in% scenarios$trend) & ("n_wave" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'seasonal', the parameter 'n_wave' must be specified!")
}
if(sum(grepl("^d\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'd' (columns must be named 'd1', 'd2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="cont" & sum(grepl("^theta\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'theta' (columns must be named 'theta1', 'theta2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(endpoint=="bin" & sum(grepl("^OR\\d", colnames(scenarios)))!=max(scenarios$num_arms)){
stop("The number of columns specifying the parameter 'OR' (columns must be named 'OR1', 'OR2', ect.) must correspond to the number of treatment arms ('n_arms')!")
}
if(sum(grepl("^lambda\\d", colnames(scenarios)))!=max(scenarios$num_arms)+1){
stop("The number of columns specifying the parameter 'lambda' (columns must be named 'lambda0', 'lambda1', ect.) must correspond to the number of arms ('n_arms'+1)!")
}
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
d10 = 2,
period_blocks = 2,
mu0 = 0,
theta1 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("inv_u", 9), rep("stepwise_2", 9)),
alpha = 25,
bs_degree = 1)
if(("inv_u" %in% scenarios$trend) & ("N_peak" %in% colnames(scenarios))==FALSE){
stop("If the time trend pattern is 'inv_u', the parameter 'N_peak' must be specified!")
}
library(NCC)
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,0,100,100))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,100,100))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,100,150))
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,150,150))
66+32+2
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
library(NCC)
get_ss_matrix(num_arms = 4, n_arm = 100, d=c(0,10,150,150))
library(NCC)
sim_study_par
?sim_study_par
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
ncc = TRUE)
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "poolmodel"), endpoint = "bin")
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "poolmodel"), endpoint = "cont")
View(sim_results)
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel", "timemachine"), endpoint = "cont")
View(sim_results)
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
View(sim_results)
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
sigma = 1,
theta1 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)))
sim_results <- sim_study_par(nsim = 5, scenarios = sim_scenarios, arms = c(3, 4), models = c("fixmodel", "sepmodel"), endpoint = "cont")
log(1)
unlink("C:/Users/pavla/Nextcloud/Alex-Pavla/P21072_Ankersmit_Covid_Studie/AUSWERTUNGEN_2021/P21072_Exploratory_Analysis_Covid_cache", recursive = TRUE)
install.packages("emmeans")
?emmeans::contrast
?t.test
1005-940
65/3
100%%3
?%%
100%%50
100%%30
100/30
N <- 100
c_l <- 30
(N-(N %% c_l))/c_l
ceiling(N/c_l)
56+56
112/2
56/24
7.10*2
150+197.29+41+33.20+14.20
150+197.29+41+33.20+14.20+350
library(NCC)
library(tidyverse)
18*3
54+16
54+12
573+75.90+31.80+77.90
75.90+31.80+77.90
75.90+31.80+77.90+468.70
library(NCC)
75.90+31.80+77.90+573.10
160*3/8
trial_data <- datasim_cont(num_arms = 10, n_arm = 250, d=500*c(0:10), theta = rep(0.25, 10), lambda = rep(0.15, 11), sigma = 1, trend = "linear")
500*c(0:10)
trial_data <- datasim_cont(num_arms = 10, n_arm = 250, d=500*c(0:9), theta = rep(0.25, 10), lambda = rep(0.15, 11), sigma = 1, trend = "linear")
View(trial_data)
mod <- lm(response ~ as.factor(treatment) + as.factor(period), trial_data)
mod
summary(mod)
trial_data <- datasim_cont(num_arms = 10, n_arm = 250, d=500*c(0:9), theta = rep(0.25, 10), lambda = rep(0.15, 11), sigma = 1, trend = "linear")
summary(lm(response ~ as.factor(treatment) + as.factor(period), trial_data))
trial_data <- datasim_cont(num_arms = 10, n_arm = 250, d=500*c(0:9), theta = rep(0.25, 10), lambda = rep(0.15, 11), sigma = 1, trend = "stepwise_2")
summary(lm(response ~ as.factor(treatment) + as.factor(period), trial_data))
0.15*9
mat <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,1,0),
c(0,0,0,0,0,1,1,1,1,1)))
mat
mat <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
mat
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
rm(mat)
y <- rnorm(10)
t(X)
t(X)%*%X
solve(t(X)%*%X)
?solve
solve(solve(t(X)%*%X))
t(X)%*%y
(solve(t(X)%*%X))%*%(t(X)%*%y)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
t(X)%*%X
solve(t(X)%*%X))
solve(t(X)%*%X)
t(X)%*%y
-2.5716141*(-0.5)-3.4970479*0.5
(solve(t(X)%*%X))%*%(t(X)%*%y)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,1,1),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
t(X)%*%X)
t(X)%*%X
solve(t(X)%*%X))
solve(t(X)%*%X)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
t(X)%*%X
solve(t(X)%*%X))
solve(t(X)%*%X)
5/
2
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X))
solve(t(X)%*%X)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,1,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X
)
1/5
1/4
y
(solve(t(X)%*%X))%*%(t(X)%*%y)
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,1),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,1,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,1,0,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
1/0.3333333
X <- matrix(cbind(c(1,0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,1,0,0,0,0),
c(0,0,0,0,0,1,1,1,1,1)), ncol = 3)
solve(t(X)%*%X)
1/0.25
# Create r package folder
usethis::create_package("C:/Users/pavla/Nextcloud/GitKraken/Pkg_test")
# Create r package folder
usethis::create_package("C:/Users/pavla/Nextcloud/GitKraken/Pkgtest")
class("lin")
typeof("lin")
type("lin")
class(1)
version
version
library(installr)
install.packages("htmltools")
library(knitr)
opts_chunk$set(collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
echo = FALSE,
fig.align = "center",
out.width = "100%")
library(plotly)
library(gifski)
library(plotly)
library(ggpubr)
library(scales)
library(kableExtra)
library(latex2exp)
library(tidyverse)
#devtools::install_github("pavlakrotka/NCC@v1.0", build = TRUE, force=T)
library(NCC)
set.seed(717)
version
library(installr)
updateR()
version
library(rjags)
library(NCC)
library(NCC)
cite(NCC)
cite("NCC")
?cite
citation("NCC")
devtools::install_github("pavlakrotka/NCC")
devtools::install_github("SimNPH/SimNPH")
library(SimNPH)
?SimFunctions
remotes::install_git("https://github.com/SimNPH/SimNPH.git")
devtools::install_git("https://github.com/SimNPH/SimNPH.git")
devtools::install_github("https://github.com/SimNPH/SimNPH.git")
devtools::install_github("https://github.com/SimNPH/SimNPH.git", force=T)
detach("package:SimNPH", unload = TRUE)
devtools::install_github("https://github.com/SimNPH/SimNPH.git", force=T)
?NCC::timemachine_bin
install.packages("NCC")
4+5+8+7
4+5+4+7
31-4-7
8+3+3+6
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
